
i2c_sensor_tim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005c7c  08005c7c  00006c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cac  08005cac  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005cac  08005cac  00006cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cb4  08005cb4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cb4  08005cb4  00006cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cb8  08005cb8  00006cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005cbc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000440  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000044c  2000044c  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000126d9  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002723  00000000  00000000  00019715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  0001be38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d53  00000000  00000000  0001cf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dee2  00000000  00000000  0001dc9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015988  00000000  00000000  0003bb7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5687  00000000  00000000  00051505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00106b8c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004aa4  00000000  00000000  00106bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0010b674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005c64 	.word	0x08005c64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005c64 	.word	0x08005c64

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_ldivmod>:
 8000a04:	b97b      	cbnz	r3, 8000a26 <__aeabi_ldivmod+0x22>
 8000a06:	b972      	cbnz	r2, 8000a26 <__aeabi_ldivmod+0x22>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bfbe      	ittt	lt
 8000a0c:	2000      	movlt	r0, #0
 8000a0e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000a12:	e006      	blt.n	8000a22 <__aeabi_ldivmod+0x1e>
 8000a14:	bf08      	it	eq
 8000a16:	2800      	cmpeq	r0, #0
 8000a18:	bf1c      	itt	ne
 8000a1a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000a1e:	f04f 30ff 	movne.w	r0, #4294967295
 8000a22:	f000 b99d 	b.w	8000d60 <__aeabi_idiv0>
 8000a26:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a2a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2e:	2900      	cmp	r1, #0
 8000a30:	db09      	blt.n	8000a46 <__aeabi_ldivmod+0x42>
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	db1a      	blt.n	8000a6c <__aeabi_ldivmod+0x68>
 8000a36:	f000 f835 	bl	8000aa4 <__udivmoddi4>
 8000a3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a42:	b004      	add	sp, #16
 8000a44:	4770      	bx	lr
 8000a46:	4240      	negs	r0, r0
 8000a48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db1b      	blt.n	8000a88 <__aeabi_ldivmod+0x84>
 8000a50:	f000 f828 	bl	8000aa4 <__udivmoddi4>
 8000a54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a5c:	b004      	add	sp, #16
 8000a5e:	4240      	negs	r0, r0
 8000a60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a64:	4252      	negs	r2, r2
 8000a66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a6a:	4770      	bx	lr
 8000a6c:	4252      	negs	r2, r2
 8000a6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a72:	f000 f817 	bl	8000aa4 <__udivmoddi4>
 8000a76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a7e:	b004      	add	sp, #16
 8000a80:	4240      	negs	r0, r0
 8000a82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a86:	4770      	bx	lr
 8000a88:	4252      	negs	r2, r2
 8000a8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a8e:	f000 f809 	bl	8000aa4 <__udivmoddi4>
 8000a92:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a9a:	b004      	add	sp, #16
 8000a9c:	4252      	negs	r2, r2
 8000a9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aa2:	4770      	bx	lr

08000aa4 <__udivmoddi4>:
 8000aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa8:	9d08      	ldr	r5, [sp, #32]
 8000aaa:	460c      	mov	r4, r1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d14e      	bne.n	8000b4e <__udivmoddi4+0xaa>
 8000ab0:	4694      	mov	ip, r2
 8000ab2:	458c      	cmp	ip, r1
 8000ab4:	4686      	mov	lr, r0
 8000ab6:	fab2 f282 	clz	r2, r2
 8000aba:	d962      	bls.n	8000b82 <__udivmoddi4+0xde>
 8000abc:	b14a      	cbz	r2, 8000ad2 <__udivmoddi4+0x2e>
 8000abe:	f1c2 0320 	rsb	r3, r2, #32
 8000ac2:	4091      	lsls	r1, r2
 8000ac4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000acc:	4319      	orrs	r1, r3
 8000ace:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ad2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad6:	fa1f f68c 	uxth.w	r6, ip
 8000ada:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ade:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ae2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ae6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aea:	fb04 f106 	mul.w	r1, r4, r6
 8000aee:	4299      	cmp	r1, r3
 8000af0:	d90a      	bls.n	8000b08 <__udivmoddi4+0x64>
 8000af2:	eb1c 0303 	adds.w	r3, ip, r3
 8000af6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000afa:	f080 8112 	bcs.w	8000d22 <__udivmoddi4+0x27e>
 8000afe:	4299      	cmp	r1, r3
 8000b00:	f240 810f 	bls.w	8000d22 <__udivmoddi4+0x27e>
 8000b04:	3c02      	subs	r4, #2
 8000b06:	4463      	add	r3, ip
 8000b08:	1a59      	subs	r1, r3, r1
 8000b0a:	fa1f f38e 	uxth.w	r3, lr
 8000b0e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b12:	fb07 1110 	mls	r1, r7, r0, r1
 8000b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1a:	fb00 f606 	mul.w	r6, r0, r6
 8000b1e:	429e      	cmp	r6, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x94>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b2a:	f080 80fc 	bcs.w	8000d26 <__udivmoddi4+0x282>
 8000b2e:	429e      	cmp	r6, r3
 8000b30:	f240 80f9 	bls.w	8000d26 <__udivmoddi4+0x282>
 8000b34:	4463      	add	r3, ip
 8000b36:	3802      	subs	r0, #2
 8000b38:	1b9b      	subs	r3, r3, r6
 8000b3a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b3e:	2100      	movs	r1, #0
 8000b40:	b11d      	cbz	r5, 8000b4a <__udivmoddi4+0xa6>
 8000b42:	40d3      	lsrs	r3, r2
 8000b44:	2200      	movs	r2, #0
 8000b46:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d905      	bls.n	8000b5e <__udivmoddi4+0xba>
 8000b52:	b10d      	cbz	r5, 8000b58 <__udivmoddi4+0xb4>
 8000b54:	e9c5 0100 	strd	r0, r1, [r5]
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4608      	mov	r0, r1
 8000b5c:	e7f5      	b.n	8000b4a <__udivmoddi4+0xa6>
 8000b5e:	fab3 f183 	clz	r1, r3
 8000b62:	2900      	cmp	r1, #0
 8000b64:	d146      	bne.n	8000bf4 <__udivmoddi4+0x150>
 8000b66:	42a3      	cmp	r3, r4
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xcc>
 8000b6a:	4290      	cmp	r0, r2
 8000b6c:	f0c0 80f0 	bcc.w	8000d50 <__udivmoddi4+0x2ac>
 8000b70:	1a86      	subs	r6, r0, r2
 8000b72:	eb64 0303 	sbc.w	r3, r4, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	2d00      	cmp	r5, #0
 8000b7a:	d0e6      	beq.n	8000b4a <__udivmoddi4+0xa6>
 8000b7c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b80:	e7e3      	b.n	8000b4a <__udivmoddi4+0xa6>
 8000b82:	2a00      	cmp	r2, #0
 8000b84:	f040 8090 	bne.w	8000ca8 <__udivmoddi4+0x204>
 8000b88:	eba1 040c 	sub.w	r4, r1, ip
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	fa1f f78c 	uxth.w	r7, ip
 8000b94:	2101      	movs	r1, #1
 8000b96:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b9e:	fb08 4416 	mls	r4, r8, r6, r4
 8000ba2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ba6:	fb07 f006 	mul.w	r0, r7, r6
 8000baa:	4298      	cmp	r0, r3
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x11c>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x11a>
 8000bb8:	4298      	cmp	r0, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2b4>
 8000bbe:	4626      	mov	r6, r4
 8000bc0:	1a1c      	subs	r4, r3, r0
 8000bc2:	fa1f f38e 	uxth.w	r3, lr
 8000bc6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bca:	fb08 4410 	mls	r4, r8, r0, r4
 8000bce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bd2:	fb00 f707 	mul.w	r7, r0, r7
 8000bd6:	429f      	cmp	r7, r3
 8000bd8:	d908      	bls.n	8000bec <__udivmoddi4+0x148>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f100 34ff 	add.w	r4, r0, #4294967295
 8000be2:	d202      	bcs.n	8000bea <__udivmoddi4+0x146>
 8000be4:	429f      	cmp	r7, r3
 8000be6:	f200 80b0 	bhi.w	8000d4a <__udivmoddi4+0x2a6>
 8000bea:	4620      	mov	r0, r4
 8000bec:	1bdb      	subs	r3, r3, r7
 8000bee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bf2:	e7a5      	b.n	8000b40 <__udivmoddi4+0x9c>
 8000bf4:	f1c1 0620 	rsb	r6, r1, #32
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000bfe:	431f      	orrs	r7, r3
 8000c00:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c04:	fa04 f301 	lsl.w	r3, r4, r1
 8000c08:	ea43 030c 	orr.w	r3, r3, ip
 8000c0c:	40f4      	lsrs	r4, r6
 8000c0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c12:	0c38      	lsrs	r0, r7, #16
 8000c14:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c18:	fbb4 fef0 	udiv	lr, r4, r0
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fb00 441e 	mls	r4, r0, lr, r4
 8000c24:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c28:	fb0e f90c 	mul.w	r9, lr, ip
 8000c2c:	45a1      	cmp	r9, r4
 8000c2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x1a6>
 8000c34:	193c      	adds	r4, r7, r4
 8000c36:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c3a:	f080 8084 	bcs.w	8000d46 <__udivmoddi4+0x2a2>
 8000c3e:	45a1      	cmp	r9, r4
 8000c40:	f240 8081 	bls.w	8000d46 <__udivmoddi4+0x2a2>
 8000c44:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c48:	443c      	add	r4, r7
 8000c4a:	eba4 0409 	sub.w	r4, r4, r9
 8000c4e:	fa1f f983 	uxth.w	r9, r3
 8000c52:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c56:	fb00 4413 	mls	r4, r0, r3, r4
 8000c5a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c5e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	d907      	bls.n	8000c76 <__udivmoddi4+0x1d2>
 8000c66:	193c      	adds	r4, r7, r4
 8000c68:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c6c:	d267      	bcs.n	8000d3e <__udivmoddi4+0x29a>
 8000c6e:	45a4      	cmp	ip, r4
 8000c70:	d965      	bls.n	8000d3e <__udivmoddi4+0x29a>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	443c      	add	r4, r7
 8000c76:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c7a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	429c      	cmp	r4, r3
 8000c84:	46ce      	mov	lr, r9
 8000c86:	469c      	mov	ip, r3
 8000c88:	d351      	bcc.n	8000d2e <__udivmoddi4+0x28a>
 8000c8a:	d04e      	beq.n	8000d2a <__udivmoddi4+0x286>
 8000c8c:	b155      	cbz	r5, 8000ca4 <__udivmoddi4+0x200>
 8000c8e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c92:	eb64 040c 	sbc.w	r4, r4, ip
 8000c96:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9a:	40cb      	lsrs	r3, r1
 8000c9c:	431e      	orrs	r6, r3
 8000c9e:	40cc      	lsrs	r4, r1
 8000ca0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	e750      	b.n	8000b4a <__udivmoddi4+0xa6>
 8000ca8:	f1c2 0320 	rsb	r3, r2, #32
 8000cac:	fa20 f103 	lsr.w	r1, r0, r3
 8000cb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	430c      	orrs	r4, r1
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ccc:	fb08 3110 	mls	r1, r8, r0, r3
 8000cd0:	0c23      	lsrs	r3, r4, #16
 8000cd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd6:	fb00 f107 	mul.w	r1, r0, r7
 8000cda:	4299      	cmp	r1, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x24c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ce6:	d22c      	bcs.n	8000d42 <__udivmoddi4+0x29e>
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d92a      	bls.n	8000d42 <__udivmoddi4+0x29e>
 8000cec:	3802      	subs	r0, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a5b      	subs	r3, r3, r1
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d00:	fb01 f307 	mul.w	r3, r1, r7
 8000d04:	42a3      	cmp	r3, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x276>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d10:	d213      	bcs.n	8000d3a <__udivmoddi4+0x296>
 8000d12:	42a3      	cmp	r3, r4
 8000d14:	d911      	bls.n	8000d3a <__udivmoddi4+0x296>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4464      	add	r4, ip
 8000d1a:	1ae4      	subs	r4, r4, r3
 8000d1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d20:	e739      	b.n	8000b96 <__udivmoddi4+0xf2>
 8000d22:	4604      	mov	r4, r0
 8000d24:	e6f0      	b.n	8000b08 <__udivmoddi4+0x64>
 8000d26:	4608      	mov	r0, r1
 8000d28:	e706      	b.n	8000b38 <__udivmoddi4+0x94>
 8000d2a:	45c8      	cmp	r8, r9
 8000d2c:	d2ae      	bcs.n	8000c8c <__udivmoddi4+0x1e8>
 8000d2e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d32:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d36:	3801      	subs	r0, #1
 8000d38:	e7a8      	b.n	8000c8c <__udivmoddi4+0x1e8>
 8000d3a:	4631      	mov	r1, r6
 8000d3c:	e7ed      	b.n	8000d1a <__udivmoddi4+0x276>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	e799      	b.n	8000c76 <__udivmoddi4+0x1d2>
 8000d42:	4630      	mov	r0, r6
 8000d44:	e7d4      	b.n	8000cf0 <__udivmoddi4+0x24c>
 8000d46:	46d6      	mov	lr, sl
 8000d48:	e77f      	b.n	8000c4a <__udivmoddi4+0x1a6>
 8000d4a:	4463      	add	r3, ip
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	e74d      	b.n	8000bec <__udivmoddi4+0x148>
 8000d50:	4606      	mov	r6, r0
 8000d52:	4623      	mov	r3, r4
 8000d54:	4608      	mov	r0, r1
 8000d56:	e70f      	b.n	8000b78 <__udivmoddi4+0xd4>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	e730      	b.n	8000bc0 <__udivmoddi4+0x11c>
 8000d5e:	bf00      	nop

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <TrimRead>:


// Questa funzione legge i parametri di calibrazione memorizzati nella ROM NVM del sensore BME280
// e li memorizza nelle variabili globali corrispondenti.
void TrimRead(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	@ 0x30
 8000d68:	af04      	add	r7, sp, #16
    uint8_t trimdata[32]; // Array per memorizzare i dati di calibrazione letti dalla NVM

    // Legge i dati di calibrazione dalla NVM (indirizzi da 0x88 a 0xA1)
    HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	2319      	movs	r3, #25
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	463b      	mov	r3, r7
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	2288      	movs	r2, #136	@ 0x88
 8000d7c:	21ec      	movs	r1, #236	@ 0xec
 8000d7e:	4857      	ldr	r0, [pc, #348]	@ (8000edc <TrimRead+0x178>)
 8000d80:	f001 fec4 	bl	8002b0c <HAL_I2C_Mem_Read>

    // Legge altri dati di calibrazione dalla NVM (indirizzi da 0xE1 a 0xE7)
    HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000d84:	463b      	mov	r3, r7
 8000d86:	3319      	adds	r3, #25
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	9202      	str	r2, [sp, #8]
 8000d8e:	2207      	movs	r2, #7
 8000d90:	9201      	str	r2, [sp, #4]
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2301      	movs	r3, #1
 8000d96:	22e1      	movs	r2, #225	@ 0xe1
 8000d98:	21ec      	movs	r1, #236	@ 0xec
 8000d9a:	4850      	ldr	r0, [pc, #320]	@ (8000edc <TrimRead+0x178>)
 8000d9c:	f001 feb6 	bl	8002b0c <HAL_I2C_Mem_Read>

    // Organizza i dati di calibrazione come descritto nel datasheet (pagina 24)
    dig_T1 = (trimdata[1] << 8) | trimdata[0];
 8000da0:	787b      	ldrb	r3, [r7, #1]
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	783b      	ldrb	r3, [r7, #0]
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee0 <TrimRead+0x17c>)
 8000db2:	801a      	strh	r2, [r3, #0]
    dig_T2 = (trimdata[3] << 8) | trimdata[2];
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	b21a      	sxth	r2, r3
 8000dba:	78bb      	ldrb	r3, [r7, #2]
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	4b48      	ldr	r3, [pc, #288]	@ (8000ee4 <TrimRead+0x180>)
 8000dc4:	801a      	strh	r2, [r3, #0]
    dig_T3 = (trimdata[5] << 8) | trimdata[4];
 8000dc6:	797b      	ldrb	r3, [r7, #5]
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	b21a      	sxth	r2, r3
 8000dcc:	793b      	ldrb	r3, [r7, #4]
 8000dce:	b21b      	sxth	r3, r3
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	b21a      	sxth	r2, r3
 8000dd4:	4b44      	ldr	r3, [pc, #272]	@ (8000ee8 <TrimRead+0x184>)
 8000dd6:	801a      	strh	r2, [r3, #0]
    dig_P1 = (trimdata[7] << 8) | trimdata[6];
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	79bb      	ldrb	r3, [r7, #6]
 8000de0:	b21b      	sxth	r3, r3
 8000de2:	4313      	orrs	r3, r2
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b40      	ldr	r3, [pc, #256]	@ (8000eec <TrimRead+0x188>)
 8000dea:	801a      	strh	r2, [r3, #0]
    dig_P2 = (trimdata[9] << 8) | trimdata[8];
 8000dec:	7a7b      	ldrb	r3, [r7, #9]
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	7a3b      	ldrb	r3, [r7, #8]
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	4b3d      	ldr	r3, [pc, #244]	@ (8000ef0 <TrimRead+0x18c>)
 8000dfc:	801a      	strh	r2, [r3, #0]
    dig_P3 = (trimdata[11] << 8) | trimdata[10];
 8000dfe:	7afb      	ldrb	r3, [r7, #11]
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	7abb      	ldrb	r3, [r7, #10]
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	b21a      	sxth	r2, r3
 8000e0c:	4b39      	ldr	r3, [pc, #228]	@ (8000ef4 <TrimRead+0x190>)
 8000e0e:	801a      	strh	r2, [r3, #0]
    dig_P4 = (trimdata[13] << 8) | trimdata[12];
 8000e10:	7b7b      	ldrb	r3, [r7, #13]
 8000e12:	021b      	lsls	r3, r3, #8
 8000e14:	b21a      	sxth	r2, r3
 8000e16:	7b3b      	ldrb	r3, [r7, #12]
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	4b36      	ldr	r3, [pc, #216]	@ (8000ef8 <TrimRead+0x194>)
 8000e20:	801a      	strh	r2, [r3, #0]
    dig_P5 = (trimdata[15] << 8) | trimdata[14];
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	7bbb      	ldrb	r3, [r7, #14]
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	4b32      	ldr	r3, [pc, #200]	@ (8000efc <TrimRead+0x198>)
 8000e32:	801a      	strh	r2, [r3, #0]
    dig_P6 = (trimdata[17] << 8) | trimdata[16];
 8000e34:	7c7b      	ldrb	r3, [r7, #17]
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	7c3b      	ldrb	r3, [r7, #16]
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	4b2f      	ldr	r3, [pc, #188]	@ (8000f00 <TrimRead+0x19c>)
 8000e44:	801a      	strh	r2, [r3, #0]
    dig_P7 = (trimdata[19] << 8) | trimdata[18];
 8000e46:	7cfb      	ldrb	r3, [r7, #19]
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	7cbb      	ldrb	r3, [r7, #18]
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b21a      	sxth	r2, r3
 8000e54:	4b2b      	ldr	r3, [pc, #172]	@ (8000f04 <TrimRead+0x1a0>)
 8000e56:	801a      	strh	r2, [r3, #0]
    dig_P8 = (trimdata[21] << 8) | trimdata[20];
 8000e58:	7d7b      	ldrb	r3, [r7, #21]
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	7d3b      	ldrb	r3, [r7, #20]
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	4313      	orrs	r3, r2
 8000e64:	b21a      	sxth	r2, r3
 8000e66:	4b28      	ldr	r3, [pc, #160]	@ (8000f08 <TrimRead+0x1a4>)
 8000e68:	801a      	strh	r2, [r3, #0]
    dig_P9 = (trimdata[23] << 8) | trimdata[22];
 8000e6a:	7dfb      	ldrb	r3, [r7, #23]
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	b21a      	sxth	r2, r3
 8000e70:	7dbb      	ldrb	r3, [r7, #22]
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	4313      	orrs	r3, r2
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	4b24      	ldr	r3, [pc, #144]	@ (8000f0c <TrimRead+0x1a8>)
 8000e7a:	801a      	strh	r2, [r3, #0]
    dig_H1 = trimdata[24];
 8000e7c:	7e3b      	ldrb	r3, [r7, #24]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b23      	ldr	r3, [pc, #140]	@ (8000f10 <TrimRead+0x1ac>)
 8000e82:	801a      	strh	r2, [r3, #0]
    dig_H2 = (trimdata[26] << 8) | trimdata[25];
 8000e84:	7ebb      	ldrb	r3, [r7, #26]
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	b21a      	sxth	r2, r3
 8000e8a:	7e7b      	ldrb	r3, [r7, #25]
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b21a      	sxth	r2, r3
 8000e92:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <TrimRead+0x1b0>)
 8000e94:	801a      	strh	r2, [r3, #0]
    dig_H3 = trimdata[27];
 8000e96:	7efb      	ldrb	r3, [r7, #27]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f18 <TrimRead+0x1b4>)
 8000e9c:	801a      	strh	r2, [r3, #0]
    dig_H4 = (trimdata[28] << 4) | (trimdata[29] & 0x0F);
 8000e9e:	7f3b      	ldrb	r3, [r7, #28]
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	b21a      	sxth	r2, r3
 8000ea4:	7f7b      	ldrb	r3, [r7, #29]
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	f003 030f 	and.w	r3, r3, #15
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <TrimRead+0x1b8>)
 8000eb4:	801a      	strh	r2, [r3, #0]
    dig_H5 = (trimdata[30] << 4) | (trimdata[29] >> 4);
 8000eb6:	7fbb      	ldrb	r3, [r7, #30]
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	7f7b      	ldrb	r3, [r7, #29]
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b21a      	sxth	r2, r3
 8000ec8:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <TrimRead+0x1bc>)
 8000eca:	801a      	strh	r2, [r3, #0]
    dig_H6 = trimdata[31];
 8000ecc:	7ffb      	ldrb	r3, [r7, #31]
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <TrimRead+0x1c0>)
 8000ed2:	801a      	strh	r2, [r3, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000060 	.word	0x20000060
 8000ee0:	20000038 	.word	0x20000038
 8000ee4:	20000040 	.word	0x20000040
 8000ee8:	20000042 	.word	0x20000042
 8000eec:	2000003a 	.word	0x2000003a
 8000ef0:	20000044 	.word	0x20000044
 8000ef4:	20000046 	.word	0x20000046
 8000ef8:	20000048 	.word	0x20000048
 8000efc:	2000004a 	.word	0x2000004a
 8000f00:	2000004c 	.word	0x2000004c
 8000f04:	2000004e 	.word	0x2000004e
 8000f08:	20000050 	.word	0x20000050
 8000f0c:	20000052 	.word	0x20000052
 8000f10:	2000003c 	.word	0x2000003c
 8000f14:	20000054 	.word	0x20000054
 8000f18:	2000003e 	.word	0x2000003e
 8000f1c:	20000056 	.word	0x20000056
 8000f20:	20000058 	.word	0x20000058
 8000f24:	2000005a 	.word	0x2000005a

08000f28 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af04      	add	r7, sp, #16
 8000f2e:	4604      	mov	r4, r0
 8000f30:	4608      	mov	r0, r1
 8000f32:	4611      	mov	r1, r2
 8000f34:	461a      	mov	r2, r3
 8000f36:	4623      	mov	r3, r4
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	717b      	strb	r3, [r7, #5]
 8000f42:	4613      	mov	r3, r2
 8000f44:	713b      	strb	r3, [r7, #4]
    // Legge i parametri di calibrazione dal sensore
    TrimRead();
 8000f46:	f7ff ff0d 	bl	8000d64 <TrimRead>

    uint8_t datatowrite = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]
    uint8_t datacheck = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73bb      	strb	r3, [r7, #14]

    // Reset del dispositivo dopo aver letto i dati di calibrazione
    datatowrite = 0xB6;  // Sequenza di reset come indicato nel datasheet
 8000f52:	23b6      	movs	r3, #182	@ 0xb6
 8000f54:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000f56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	f107 030f 	add.w	r3, r7, #15
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2301      	movs	r3, #1
 8000f68:	22e0      	movs	r2, #224	@ 0xe0
 8000f6a:	21ec      	movs	r1, #236	@ 0xec
 8000f6c:	4858      	ldr	r0, [pc, #352]	@ (80010d0 <BME280_Config+0x1a8>)
 8000f6e:	f001 fcb9 	bl	80028e4 <HAL_I2C_Mem_Write>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d002      	beq.n	8000f7e <BME280_Config+0x56>
    {
        return -1;  // Ritorna -1 se la scrittura fallisce
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7c:	e0a3      	b.n	80010c6 <BME280_Config+0x19e>
    }

    HAL_Delay(100);  // Attende 100 ms per il completamento del reset
 8000f7e:	2064      	movs	r0, #100	@ 0x64
 8000f80:	f001 f94c 	bl	800221c <HAL_Delay>

    // Configura l'oversampling dell'umidità nel registro CTRL_HUM_REG (0xF2)
    datatowrite = osrs_h;
 8000f84:	797b      	ldrb	r3, [r7, #5]
 8000f86:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000f88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f8c:	9302      	str	r3, [sp, #8]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	f107 030f 	add.w	r3, r7, #15
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	22f2      	movs	r2, #242	@ 0xf2
 8000f9c:	21ec      	movs	r1, #236	@ 0xec
 8000f9e:	484c      	ldr	r0, [pc, #304]	@ (80010d0 <BME280_Config+0x1a8>)
 8000fa0:	f001 fca0 	bl	80028e4 <HAL_I2C_Mem_Write>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <BME280_Config+0x88>
    {
        return -1;  // Ritorna -1 se la scrittura fallisce
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	e08a      	b.n	80010c6 <BME280_Config+0x19e>
    }
    HAL_Delay(100);  // Attende 100 ms
 8000fb0:	2064      	movs	r0, #100	@ 0x64
 8000fb2:	f001 f933 	bl	800221c <HAL_Delay>

    // Legge il valore del registro CTRL_HUM_REG per confermare la scrittura
    HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8000fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fba:	9302      	str	r3, [sp, #8]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	f107 030e 	add.w	r3, r7, #14
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	22f2      	movs	r2, #242	@ 0xf2
 8000fca:	21ec      	movs	r1, #236	@ 0xec
 8000fcc:	4840      	ldr	r0, [pc, #256]	@ (80010d0 <BME280_Config+0x1a8>)
 8000fce:	f001 fd9d 	bl	8002b0c <HAL_I2C_Mem_Read>
    if (datacheck != datatowrite)
 8000fd2:	7bba      	ldrb	r2, [r7, #14]
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d002      	beq.n	8000fe0 <BME280_Config+0xb8>
    {
        return -1;  // Ritorna -1 se il valore letto non corrisponde a quello scritto
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e072      	b.n	80010c6 <BME280_Config+0x19e>
    }
    // Configura il tempo di standby e il coefficiente del filtro IIR nel registro CONFIG_REG (0xF5)
    datatowrite = (t_sb << 5) | (filter << 2);
 8000fe0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fe4:	015b      	lsls	r3, r3, #5
 8000fe6:	b25a      	sxtb	r2, r3
 8000fe8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000ff8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2301      	movs	r3, #1
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	f107 030f 	add.w	r3, r7, #15
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	22f5      	movs	r2, #245	@ 0xf5
 800100c:	21ec      	movs	r1, #236	@ 0xec
 800100e:	4830      	ldr	r0, [pc, #192]	@ (80010d0 <BME280_Config+0x1a8>)
 8001010:	f001 fc68 	bl	80028e4 <HAL_I2C_Mem_Write>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <BME280_Config+0xf8>
    {
        return -1;  // Ritorna -1 se la scrittura fallisce
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e052      	b.n	80010c6 <BME280_Config+0x19e>
    }
    HAL_Delay(100);  // Attende 100 ms
 8001020:	2064      	movs	r0, #100	@ 0x64
 8001022:	f001 f8fb 	bl	800221c <HAL_Delay>
    // Legge il valore del registro CONFIG_REG per confermare la scrittura
    HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001026:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	2301      	movs	r3, #1
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	f107 030e 	add.w	r3, r7, #14
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	22f5      	movs	r2, #245	@ 0xf5
 800103a:	21ec      	movs	r1, #236	@ 0xec
 800103c:	4824      	ldr	r0, [pc, #144]	@ (80010d0 <BME280_Config+0x1a8>)
 800103e:	f001 fd65 	bl	8002b0c <HAL_I2C_Mem_Read>
    if (datacheck != datatowrite)
 8001042:	7bba      	ldrb	r2, [r7, #14]
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	429a      	cmp	r2, r3
 8001048:	d002      	beq.n	8001050 <BME280_Config+0x128>
    {
        return -1;  // Ritorna -1 se il valore letto non corrisponde a quello scritto
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	e03a      	b.n	80010c6 <BME280_Config+0x19e>
    }

    // Configura l'oversampling della temperatura, della pressione e la modalità operativa nel registro CTRL_MEAS_REG (0xF4)
    // i primi due bit sono relativi al mode, poi 3 all'oversampling della pressione (che parte dal bit 2 ed è shiftato di 2,
    // poi dal bit 5 in poi c'è l'oversampling per la temperatura e per questo è shiftato di 5
    datatowrite = (osrs_t << 5) | (osrs_p << 2) | mode;
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	015b      	lsls	r3, r3, #5
 8001054:	b25a      	sxtb	r2, r3
 8001056:	79bb      	ldrb	r3, [r7, #6]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	b25b      	sxtb	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b25a      	sxtb	r2, r3
 8001060:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001064:	4313      	orrs	r3, r2
 8001066:	b25b      	sxtb	r3, r3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800106c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	2301      	movs	r3, #1
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	f107 030f 	add.w	r3, r7, #15
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	22f4      	movs	r2, #244	@ 0xf4
 8001080:	21ec      	movs	r1, #236	@ 0xec
 8001082:	4813      	ldr	r0, [pc, #76]	@ (80010d0 <BME280_Config+0x1a8>)
 8001084:	f001 fc2e 	bl	80028e4 <HAL_I2C_Mem_Write>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <BME280_Config+0x16c>
    {
        return -1;  // Ritorna -1 se la scrittura fallisce
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	e018      	b.n	80010c6 <BME280_Config+0x19e>
    }
    HAL_Delay(100);  // Attende 100 ms
 8001094:	2064      	movs	r0, #100	@ 0x64
 8001096:	f001 f8c1 	bl	800221c <HAL_Delay>
    // Legge il valore del registro CTRL_MEAS_REG per confermare la scrittura
    HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800109a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109e:	9302      	str	r3, [sp, #8]
 80010a0:	2301      	movs	r3, #1
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	f107 030e 	add.w	r3, r7, #14
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	22f4      	movs	r2, #244	@ 0xf4
 80010ae:	21ec      	movs	r1, #236	@ 0xec
 80010b0:	4807      	ldr	r0, [pc, #28]	@ (80010d0 <BME280_Config+0x1a8>)
 80010b2:	f001 fd2b 	bl	8002b0c <HAL_I2C_Mem_Read>
    if (datacheck != datatowrite)
 80010b6:	7bba      	ldrb	r2, [r7, #14]
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d002      	beq.n	80010c4 <BME280_Config+0x19c>
    {
        return -1;  // Ritorna -1 se il valore letto non corrisponde a quello scritto
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	e000      	b.n	80010c6 <BME280_Config+0x19e>
    }

    return 0;  // Ritorna 0 se tutte le operazioni sono state eseguite correttamente
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000060 	.word	0x20000060

080010d4 <BMEReadRaw>:


int BMEReadRaw(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af04      	add	r7, sp, #16
    uint8_t RawData[8];  // Array per memorizzare i dati grezzi letti dal sensore

    // Verifica l'ID del chip prima di leggere i dati
    HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80010da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010de:	9302      	str	r3, [sp, #8]
 80010e0:	2301      	movs	r3, #1
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001160 <BMEReadRaw+0x8c>)
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2301      	movs	r3, #1
 80010ea:	22d0      	movs	r2, #208	@ 0xd0
 80010ec:	21ec      	movs	r1, #236	@ 0xec
 80010ee:	481d      	ldr	r0, [pc, #116]	@ (8001164 <BMEReadRaw+0x90>)
 80010f0:	f001 fd0c 	bl	8002b0c <HAL_I2C_Mem_Read>

    // Controlla se l'ID del chip è corretto (0x60 è l'ID del BME280)
    if (chipID == 0x60)
 80010f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <BMEReadRaw+0x8c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b60      	cmp	r3, #96	@ 0x60
 80010fa:	d12a      	bne.n	8001152 <BMEReadRaw+0x7e>
    {
        // Legge i registri da 0xF7 a 0xFE (contengono i dati di pressione, temperatura e umidità)
        HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	9302      	str	r3, [sp, #8]
 8001102:	2308      	movs	r3, #8
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	463b      	mov	r3, r7
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	22f7      	movs	r2, #247	@ 0xf7
 800110e:	21ec      	movs	r1, #236	@ 0xec
 8001110:	4814      	ldr	r0, [pc, #80]	@ (8001164 <BMEReadRaw+0x90>)
 8001112:	f001 fcfb 	bl	8002b0c <HAL_I2C_Mem_Read>

        /* Calcola i dati grezzi per i parametri
         * Qui la pressione e la temperatura sono in formato a 20 bit e l'umidità in formato a 16 bit
         */
        pRaw = (RawData[0] << 12) | (RawData[1] << 4) | (RawData[2] >> 4);  // Dati grezzi della pressione
 8001116:	783b      	ldrb	r3, [r7, #0]
 8001118:	031a      	lsls	r2, r3, #12
 800111a:	787b      	ldrb	r3, [r7, #1]
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	4313      	orrs	r3, r2
 8001120:	78ba      	ldrb	r2, [r7, #2]
 8001122:	0912      	lsrs	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	4313      	orrs	r3, r2
 8001128:	4a0f      	ldr	r2, [pc, #60]	@ (8001168 <BMEReadRaw+0x94>)
 800112a:	6013      	str	r3, [r2, #0]
        tRaw = (RawData[3] << 12) | (RawData[4] << 4) | (RawData[5] >> 4);  // Dati grezzi della temperatura
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	031a      	lsls	r2, r3, #12
 8001130:	793b      	ldrb	r3, [r7, #4]
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	4313      	orrs	r3, r2
 8001136:	797a      	ldrb	r2, [r7, #5]
 8001138:	0912      	lsrs	r2, r2, #4
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	4313      	orrs	r3, r2
 800113e:	4a0b      	ldr	r2, [pc, #44]	@ (800116c <BMEReadRaw+0x98>)
 8001140:	6013      	str	r3, [r2, #0]
        hRaw = (RawData[6] << 8) | (RawData[7]);                            // Dati grezzi dell'umidità
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	79fa      	ldrb	r2, [r7, #7]
 8001148:	4313      	orrs	r3, r2
 800114a:	4a09      	ldr	r2, [pc, #36]	@ (8001170 <BMEReadRaw+0x9c>)
 800114c:	6013      	str	r3, [r2, #0]

        return 0;  // Ritorna 0 se la lettura è avvenuta con successo
 800114e:	2300      	movs	r3, #0
 8001150:	e001      	b.n	8001156 <BMEReadRaw+0x82>
    }
    else
    {
        return -1;  // Ritorna -1 se l'ID del chip non è corretto
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000028 	.word	0x20000028
 8001164:	20000060 	.word	0x20000060
 8001168:	20000030 	.word	0x20000030
 800116c:	2000002c 	.word	0x2000002c
 8001170:	20000034 	.word	0x20000034

08001174 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	10da      	asrs	r2, r3, #3
 8001180:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <BME280_compensate_T_int32+0x74>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	4a18      	ldr	r2, [pc, #96]	@ (80011ec <BME280_compensate_T_int32+0x78>)
 800118a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800118e:	fb02 f303 	mul.w	r3, r2, r3
 8001192:	12db      	asrs	r3, r3, #11
 8001194:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	111b      	asrs	r3, r3, #4
 800119a:	4a13      	ldr	r2, [pc, #76]	@ (80011e8 <BME280_compensate_T_int32+0x74>)
 800119c:	8812      	ldrh	r2, [r2, #0]
 800119e:	1a9b      	subs	r3, r3, r2
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	1112      	asrs	r2, r2, #4
 80011a4:	4910      	ldr	r1, [pc, #64]	@ (80011e8 <BME280_compensate_T_int32+0x74>)
 80011a6:	8809      	ldrh	r1, [r1, #0]
 80011a8:	1a52      	subs	r2, r2, r1
 80011aa:	fb02 f303 	mul.w	r3, r2, r3
 80011ae:	131b      	asrs	r3, r3, #12
 80011b0:	4a0f      	ldr	r2, [pc, #60]	@ (80011f0 <BME280_compensate_T_int32+0x7c>)
 80011b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011b6:	fb02 f303 	mul.w	r3, r2, r3
 80011ba:	139b      	asrs	r3, r3, #14
 80011bc:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a0b      	ldr	r2, [pc, #44]	@ (80011f4 <BME280_compensate_T_int32+0x80>)
 80011c6:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <BME280_compensate_T_int32+0x80>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	3380      	adds	r3, #128	@ 0x80
 80011d4:	121b      	asrs	r3, r3, #8
 80011d6:	60fb      	str	r3, [r7, #12]
	return T;
 80011d8:	68fb      	ldr	r3, [r7, #12]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	371c      	adds	r7, #28
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000038 	.word	0x20000038
 80011ec:	20000040 	.word	0x20000040
 80011f0:	20000042 	.word	0x20000042
 80011f4:	2000005c 	.word	0x2000005c

080011f8 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 80011f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011fc:	b0ca      	sub	sp, #296	@ 0x128
 80011fe:	af00      	add	r7, sp, #0
 8001200:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001204:	4baf      	ldr	r3, [pc, #700]	@ (80014c4 <BME280_compensate_P_int64+0x2cc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	17da      	asrs	r2, r3, #31
 800120a:	461c      	mov	r4, r3
 800120c:	4615      	mov	r5, r2
 800120e:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001212:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001216:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800121a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800121e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001222:	fb03 f102 	mul.w	r1, r3, r2
 8001226:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800122a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800122e:	fb02 f303 	mul.w	r3, r2, r3
 8001232:	18ca      	adds	r2, r1, r3
 8001234:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001238:	fba3 8903 	umull	r8, r9, r3, r3
 800123c:	eb02 0309 	add.w	r3, r2, r9
 8001240:	4699      	mov	r9, r3
 8001242:	4ba1      	ldr	r3, [pc, #644]	@ (80014c8 <BME280_compensate_P_int64+0x2d0>)
 8001244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001248:	b21b      	sxth	r3, r3
 800124a:	17da      	asrs	r2, r3, #31
 800124c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001250:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001254:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001258:	4603      	mov	r3, r0
 800125a:	fb03 f209 	mul.w	r2, r3, r9
 800125e:	460b      	mov	r3, r1
 8001260:	fb08 f303 	mul.w	r3, r8, r3
 8001264:	4413      	add	r3, r2
 8001266:	4602      	mov	r2, r0
 8001268:	fba8 1202 	umull	r1, r2, r8, r2
 800126c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001270:	460a      	mov	r2, r1
 8001272:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001276:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800127a:	4413      	add	r3, r2
 800127c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001280:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001284:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8001288:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 800128c:	4b8f      	ldr	r3, [pc, #572]	@ (80014cc <BME280_compensate_P_int64+0x2d4>)
 800128e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001292:	b21b      	sxth	r3, r3
 8001294:	17da      	asrs	r2, r3, #31
 8001296:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800129a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800129e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012a2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80012a6:	462a      	mov	r2, r5
 80012a8:	fb02 f203 	mul.w	r2, r2, r3
 80012ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012b0:	4621      	mov	r1, r4
 80012b2:	fb01 f303 	mul.w	r3, r1, r3
 80012b6:	441a      	add	r2, r3
 80012b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012bc:	4621      	mov	r1, r4
 80012be:	fba3 1301 	umull	r1, r3, r3, r1
 80012c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80012c6:	460b      	mov	r3, r1
 80012c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80012cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80012d0:	18d3      	adds	r3, r2, r3
 80012d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80012d6:	f04f 0000 	mov.w	r0, #0
 80012da:	f04f 0100 	mov.w	r1, #0
 80012de:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80012e2:	462b      	mov	r3, r5
 80012e4:	0459      	lsls	r1, r3, #17
 80012e6:	4623      	mov	r3, r4
 80012e8:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80012ec:	4623      	mov	r3, r4
 80012ee:	0458      	lsls	r0, r3, #17
 80012f0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80012f4:	1814      	adds	r4, r2, r0
 80012f6:	643c      	str	r4, [r7, #64]	@ 0x40
 80012f8:	414b      	adcs	r3, r1
 80012fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80012fc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001300:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001304:	4b72      	ldr	r3, [pc, #456]	@ (80014d0 <BME280_compensate_P_int64+0x2d8>)
 8001306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130a:	b21b      	sxth	r3, r3
 800130c:	17da      	asrs	r2, r3, #31
 800130e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001312:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001316:	f04f 0000 	mov.w	r0, #0
 800131a:	f04f 0100 	mov.w	r1, #0
 800131e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001322:	00d9      	lsls	r1, r3, #3
 8001324:	2000      	movs	r0, #0
 8001326:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800132a:	1814      	adds	r4, r2, r0
 800132c:	63bc      	str	r4, [r7, #56]	@ 0x38
 800132e:	414b      	adcs	r3, r1
 8001330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001332:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001336:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800133a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800133e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001342:	fb03 f102 	mul.w	r1, r3, r2
 8001346:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800134a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800134e:	fb02 f303 	mul.w	r3, r2, r3
 8001352:	18ca      	adds	r2, r1, r3
 8001354:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001358:	fba3 1303 	umull	r1, r3, r3, r3
 800135c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001360:	460b      	mov	r3, r1
 8001362:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800136a:	18d3      	adds	r3, r2, r3
 800136c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001370:	4b58      	ldr	r3, [pc, #352]	@ (80014d4 <BME280_compensate_P_int64+0x2dc>)
 8001372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001376:	b21b      	sxth	r3, r3
 8001378:	17da      	asrs	r2, r3, #31
 800137a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800137e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001382:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001386:	462b      	mov	r3, r5
 8001388:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800138c:	4642      	mov	r2, r8
 800138e:	fb02 f203 	mul.w	r2, r2, r3
 8001392:	464b      	mov	r3, r9
 8001394:	4621      	mov	r1, r4
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	4413      	add	r3, r2
 800139c:	4622      	mov	r2, r4
 800139e:	4641      	mov	r1, r8
 80013a0:	fba2 1201 	umull	r1, r2, r2, r1
 80013a4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80013a8:	460a      	mov	r2, r1
 80013aa:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80013ae:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80013b2:	4413      	add	r3, r2
 80013b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80013b8:	f04f 0000 	mov.w	r0, #0
 80013bc:	f04f 0100 	mov.w	r1, #0
 80013c0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80013c4:	4623      	mov	r3, r4
 80013c6:	0a18      	lsrs	r0, r3, #8
 80013c8:	462b      	mov	r3, r5
 80013ca:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80013ce:	462b      	mov	r3, r5
 80013d0:	1219      	asrs	r1, r3, #8
 80013d2:	4b41      	ldr	r3, [pc, #260]	@ (80014d8 <BME280_compensate_P_int64+0x2e0>)
 80013d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d8:	b21b      	sxth	r3, r3
 80013da:	17da      	asrs	r2, r3, #31
 80013dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013e0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80013e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013e8:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80013ec:	464a      	mov	r2, r9
 80013ee:	fb02 f203 	mul.w	r2, r2, r3
 80013f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80013f6:	4644      	mov	r4, r8
 80013f8:	fb04 f303 	mul.w	r3, r4, r3
 80013fc:	441a      	add	r2, r3
 80013fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001402:	4644      	mov	r4, r8
 8001404:	fba3 4304 	umull	r4, r3, r3, r4
 8001408:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800140c:	4623      	mov	r3, r4
 800140e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001412:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001416:	18d3      	adds	r3, r2, r3
 8001418:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001428:	464c      	mov	r4, r9
 800142a:	0323      	lsls	r3, r4, #12
 800142c:	4644      	mov	r4, r8
 800142e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001432:	4644      	mov	r4, r8
 8001434:	0322      	lsls	r2, r4, #12
 8001436:	1884      	adds	r4, r0, r2
 8001438:	633c      	str	r4, [r7, #48]	@ 0x30
 800143a:	eb41 0303 	adc.w	r3, r1, r3
 800143e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001440:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001444:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001448:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800144c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001450:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001454:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001458:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <BME280_compensate_P_int64+0x2e4>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	b29b      	uxth	r3, r3
 800145e:	2200      	movs	r2, #0
 8001460:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001464:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001468:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800146c:	462b      	mov	r3, r5
 800146e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001472:	4642      	mov	r2, r8
 8001474:	fb02 f203 	mul.w	r2, r2, r3
 8001478:	464b      	mov	r3, r9
 800147a:	4621      	mov	r1, r4
 800147c:	fb01 f303 	mul.w	r3, r1, r3
 8001480:	4413      	add	r3, r2
 8001482:	4622      	mov	r2, r4
 8001484:	4641      	mov	r1, r8
 8001486:	fba2 1201 	umull	r1, r2, r2, r1
 800148a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800148e:	460a      	mov	r2, r1
 8001490:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001494:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001498:	4413      	add	r3, r2
 800149a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80014aa:	4629      	mov	r1, r5
 80014ac:	104a      	asrs	r2, r1, #1
 80014ae:	4629      	mov	r1, r5
 80014b0:	17cb      	asrs	r3, r1, #31
 80014b2:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 80014b6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80014ba:	4313      	orrs	r3, r2
 80014bc:	d110      	bne.n	80014e0 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 80014be:	2300      	movs	r3, #0
 80014c0:	e154      	b.n	800176c <BME280_compensate_P_int64+0x574>
 80014c2:	bf00      	nop
 80014c4:	2000005c 	.word	0x2000005c
 80014c8:	2000004c 	.word	0x2000004c
 80014cc:	2000004a 	.word	0x2000004a
 80014d0:	20000048 	.word	0x20000048
 80014d4:	20000046 	.word	0x20000046
 80014d8:	20000044 	.word	0x20000044
 80014dc:	2000003a 	.word	0x2000003a
	}
	p = 1048576-adc_P;
 80014e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80014e4:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80014e8:	17da      	asrs	r2, r3, #31
 80014ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80014ee:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80014f2:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 80014f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80014fa:	105b      	asrs	r3, r3, #1
 80014fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001500:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001504:	07db      	lsls	r3, r3, #31
 8001506:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800150a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800150e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001512:	4621      	mov	r1, r4
 8001514:	1a89      	subs	r1, r1, r2
 8001516:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001518:	4629      	mov	r1, r5
 800151a:	eb61 0303 	sbc.w	r3, r1, r3
 800151e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001520:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001524:	4622      	mov	r2, r4
 8001526:	462b      	mov	r3, r5
 8001528:	1891      	adds	r1, r2, r2
 800152a:	6239      	str	r1, [r7, #32]
 800152c:	415b      	adcs	r3, r3
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001530:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001534:	4621      	mov	r1, r4
 8001536:	1851      	adds	r1, r2, r1
 8001538:	61b9      	str	r1, [r7, #24]
 800153a:	4629      	mov	r1, r5
 800153c:	414b      	adcs	r3, r1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800154c:	4649      	mov	r1, r9
 800154e:	018b      	lsls	r3, r1, #6
 8001550:	4641      	mov	r1, r8
 8001552:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001556:	4641      	mov	r1, r8
 8001558:	018a      	lsls	r2, r1, #6
 800155a:	4641      	mov	r1, r8
 800155c:	1889      	adds	r1, r1, r2
 800155e:	6139      	str	r1, [r7, #16]
 8001560:	4649      	mov	r1, r9
 8001562:	eb43 0101 	adc.w	r1, r3, r1
 8001566:	6179      	str	r1, [r7, #20]
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001574:	4649      	mov	r1, r9
 8001576:	008b      	lsls	r3, r1, #2
 8001578:	4641      	mov	r1, r8
 800157a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800157e:	4641      	mov	r1, r8
 8001580:	008a      	lsls	r2, r1, #2
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	4603      	mov	r3, r0
 8001588:	4622      	mov	r2, r4
 800158a:	189b      	adds	r3, r3, r2
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	460b      	mov	r3, r1
 8001590:	462a      	mov	r2, r5
 8001592:	eb42 0303 	adc.w	r3, r2, r3
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015a4:	4649      	mov	r1, r9
 80015a6:	008b      	lsls	r3, r1, #2
 80015a8:	4641      	mov	r1, r8
 80015aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015ae:	4641      	mov	r1, r8
 80015b0:	008a      	lsls	r2, r1, #2
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	4603      	mov	r3, r0
 80015b8:	4622      	mov	r2, r4
 80015ba:	189b      	adds	r3, r3, r2
 80015bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80015be:	462b      	mov	r3, r5
 80015c0:	460a      	mov	r2, r1
 80015c2:	eb42 0303 	adc.w	r3, r2, r3
 80015c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80015c8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80015cc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80015d0:	f7ff fa18 	bl	8000a04 <__aeabi_ldivmod>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80015dc:	4b66      	ldr	r3, [pc, #408]	@ (8001778 <BME280_compensate_P_int64+0x580>)
 80015de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	17da      	asrs	r2, r3, #31
 80015e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015e8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015ea:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80015ee:	f04f 0000 	mov.w	r0, #0
 80015f2:	f04f 0100 	mov.w	r1, #0
 80015f6:	0b50      	lsrs	r0, r2, #13
 80015f8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80015fc:	1359      	asrs	r1, r3, #13
 80015fe:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001602:	462b      	mov	r3, r5
 8001604:	fb00 f203 	mul.w	r2, r0, r3
 8001608:	4623      	mov	r3, r4
 800160a:	fb03 f301 	mul.w	r3, r3, r1
 800160e:	4413      	add	r3, r2
 8001610:	4622      	mov	r2, r4
 8001612:	fba2 1200 	umull	r1, r2, r2, r0
 8001616:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800161a:	460a      	mov	r2, r1
 800161c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001620:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001624:	4413      	add	r3, r2
 8001626:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800162a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800162e:	f04f 0000 	mov.w	r0, #0
 8001632:	f04f 0100 	mov.w	r1, #0
 8001636:	0b50      	lsrs	r0, r2, #13
 8001638:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800163c:	1359      	asrs	r1, r3, #13
 800163e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001642:	462b      	mov	r3, r5
 8001644:	fb00 f203 	mul.w	r2, r0, r3
 8001648:	4623      	mov	r3, r4
 800164a:	fb03 f301 	mul.w	r3, r3, r1
 800164e:	4413      	add	r3, r2
 8001650:	4622      	mov	r2, r4
 8001652:	fba2 1200 	umull	r1, r2, r2, r0
 8001656:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800165a:	460a      	mov	r2, r1
 800165c:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001660:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001664:	4413      	add	r3, r2
 8001666:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001676:	4621      	mov	r1, r4
 8001678:	0e4a      	lsrs	r2, r1, #25
 800167a:	4629      	mov	r1, r5
 800167c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001680:	4629      	mov	r1, r5
 8001682:	164b      	asrs	r3, r1, #25
 8001684:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001688:	4b3c      	ldr	r3, [pc, #240]	@ (800177c <BME280_compensate_P_int64+0x584>)
 800168a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168e:	b21b      	sxth	r3, r3
 8001690:	17da      	asrs	r2, r3, #31
 8001692:	663b      	str	r3, [r7, #96]	@ 0x60
 8001694:	667a      	str	r2, [r7, #100]	@ 0x64
 8001696:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800169a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800169e:	462a      	mov	r2, r5
 80016a0:	fb02 f203 	mul.w	r2, r2, r3
 80016a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016a8:	4621      	mov	r1, r4
 80016aa:	fb01 f303 	mul.w	r3, r1, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80016b4:	4621      	mov	r1, r4
 80016b6:	fba2 1201 	umull	r1, r2, r2, r1
 80016ba:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80016be:	460a      	mov	r2, r1
 80016c0:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80016c4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80016c8:	4413      	add	r3, r2
 80016ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80016da:	4621      	mov	r1, r4
 80016dc:	0cca      	lsrs	r2, r1, #19
 80016de:	4629      	mov	r1, r5
 80016e0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80016e4:	4629      	mov	r1, r5
 80016e6:	14cb      	asrs	r3, r1, #19
 80016e8:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 80016ec:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80016f0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80016f4:	1884      	adds	r4, r0, r2
 80016f6:	65bc      	str	r4, [r7, #88]	@ 0x58
 80016f8:	eb41 0303 	adc.w	r3, r1, r3
 80016fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80016fe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001702:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001706:	4621      	mov	r1, r4
 8001708:	1889      	adds	r1, r1, r2
 800170a:	6539      	str	r1, [r7, #80]	@ 0x50
 800170c:	4629      	mov	r1, r5
 800170e:	eb43 0101 	adc.w	r1, r3, r1
 8001712:	6579      	str	r1, [r7, #84]	@ 0x54
 8001714:	f04f 0000 	mov.w	r0, #0
 8001718:	f04f 0100 	mov.w	r1, #0
 800171c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001720:	4623      	mov	r3, r4
 8001722:	0a18      	lsrs	r0, r3, #8
 8001724:	462b      	mov	r3, r5
 8001726:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800172a:	462b      	mov	r3, r5
 800172c:	1219      	asrs	r1, r3, #8
 800172e:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <BME280_compensate_P_int64+0x588>)
 8001730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001734:	b21b      	sxth	r3, r3
 8001736:	17da      	asrs	r2, r3, #31
 8001738:	64bb      	str	r3, [r7, #72]	@ 0x48
 800173a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001748:	464c      	mov	r4, r9
 800174a:	0123      	lsls	r3, r4, #4
 800174c:	4644      	mov	r4, r8
 800174e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001752:	4644      	mov	r4, r8
 8001754:	0122      	lsls	r2, r4, #4
 8001756:	1884      	adds	r4, r0, r2
 8001758:	603c      	str	r4, [r7, #0]
 800175a:	eb41 0303 	adc.w	r3, r1, r3
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001764:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001768:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 800176c:	4618      	mov	r0, r3
 800176e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001772:	46bd      	mov	sp, r7
 8001774:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001778:	20000052 	.word	0x20000052
 800177c:	20000050 	.word	0x20000050
 8001780:	2000004e 	.word	0x2000004e

08001784 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 800178c:	4b2c      	ldr	r3, [pc, #176]	@ (8001840 <bme280_compensate_H_int32+0xbc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001794:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	039a      	lsls	r2, r3, #14
 800179a:	4b2a      	ldr	r3, [pc, #168]	@ (8001844 <bme280_compensate_H_int32+0xc0>)
 800179c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a0:	051b      	lsls	r3, r3, #20
 80017a2:	1ad2      	subs	r2, r2, r3
 80017a4:	4b28      	ldr	r3, [pc, #160]	@ (8001848 <bme280_compensate_H_int32+0xc4>)
 80017a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017aa:	4619      	mov	r1, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	fb01 f303 	mul.w	r3, r1, r3
 80017b2:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80017b4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80017b8:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80017ba:	4a24      	ldr	r2, [pc, #144]	@ (800184c <bme280_compensate_H_int32+0xc8>)
 80017bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017c0:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80017c8:	1292      	asrs	r2, r2, #10
 80017ca:	4921      	ldr	r1, [pc, #132]	@ (8001850 <bme280_compensate_H_int32+0xcc>)
 80017cc:	8809      	ldrh	r1, [r1, #0]
 80017ce:	4608      	mov	r0, r1
 80017d0:	68f9      	ldr	r1, [r7, #12]
 80017d2:	fb00 f101 	mul.w	r1, r0, r1
 80017d6:	12c9      	asrs	r1, r1, #11
 80017d8:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 80017dc:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 80017e0:	1292      	asrs	r2, r2, #10
 80017e2:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80017e6:	491b      	ldr	r1, [pc, #108]	@ (8001854 <bme280_compensate_H_int32+0xd0>)
 80017e8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80017ec:	fb01 f202 	mul.w	r2, r1, r2
 80017f0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 80017f4:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80017f6:	fb02 f303 	mul.w	r3, r2, r3
 80017fa:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	13db      	asrs	r3, r3, #15
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	13d2      	asrs	r2, r2, #15
 8001804:	fb02 f303 	mul.w	r3, r2, r3
 8001808:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 800180a:	4a13      	ldr	r2, [pc, #76]	@ (8001858 <bme280_compensate_H_int32+0xd4>)
 800180c:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 800180e:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001812:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001820:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001828:	bfa8      	it	ge
 800182a:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800182e:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	131b      	asrs	r3, r3, #12
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	2000005c 	.word	0x2000005c
 8001844:	20000056 	.word	0x20000056
 8001848:	20000058 	.word	0x20000058
 800184c:	2000005a 	.word	0x2000005a
 8001850:	2000003e 	.word	0x2000003e
 8001854:	20000054 	.word	0x20000054
 8001858:	2000003c 	.word	0x2000003c

0800185c <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
    // Legge i dati grezzi dal sensore
    if (BMEReadRaw() == 0)  // Se la lettura è avvenuta con successo
 8001860:	f7ff fc38 	bl	80010d4 <BMEReadRaw>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d163      	bne.n	8001932 <BME280_Measure+0xd6>
    {
        // Calcola la temperatura
        if (tRaw == 0x800000)
 800186a:	4b39      	ldr	r3, [pc, #228]	@ (8001950 <BME280_Measure+0xf4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001872:	d104      	bne.n	800187e <BME280_Measure+0x22>
        {
            Temperature = 0; // Valore nel caso in cui la misurazione della temperatura fosse disabilitata, pag 28
 8001874:	4b37      	ldr	r3, [pc, #220]	@ (8001954 <BME280_Measure+0xf8>)
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e016      	b.n	80018ac <BME280_Measure+0x50>
        }
        else
        {
            // Compensa il valore grezzo della temperatura e lo converte in °C
            Temperature = (BME280_compensate_T_int32(tRaw)) / 100.0;  // Come indicato nel datasheet, la temperatura è moltiplicata per 100
 800187e:	4b34      	ldr	r3, [pc, #208]	@ (8001950 <BME280_Measure+0xf4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fc76 	bl	8001174 <BME280_compensate_T_int32>
 8001888:	4603      	mov	r3, r0
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fdee 	bl	800046c <__aeabi_i2d>
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	4b30      	ldr	r3, [pc, #192]	@ (8001958 <BME280_Measure+0xfc>)
 8001896:	f7fe ff7d 	bl	8000794 <__aeabi_ddiv>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff f85f 	bl	8000964 <__aeabi_d2f>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001954 <BME280_Measure+0xf8>)
 80018aa:	6013      	str	r3, [r2, #0]
        }

        // Calcola la pressione
        if (pRaw == 0x800000)
 80018ac:	4b2b      	ldr	r3, [pc, #172]	@ (800195c <BME280_Measure+0x100>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80018b4:	d104      	bne.n	80018c0 <BME280_Measure+0x64>
        {
            Pressure = 0; // Valore nel caso in cui la misurazione della pressione fosse disabilitata, pag 28-29
 80018b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001960 <BME280_Measure+0x104>)
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	e016      	b.n	80018ee <BME280_Measure+0x92>
        }
        else
        {
#if SUPPORT_64BIT
            // Compensa il valore grezzo della pressione utilizzando una funzione a 64 bit e lo converte in hPa
            Pressure = (BME280_compensate_P_int64(pRaw)) / 256.0;  // Come indicato nel datasheet, la pressione è moltiplicata per 256
 80018c0:	4b26      	ldr	r3, [pc, #152]	@ (800195c <BME280_Measure+0x100>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fc97 	bl	80011f8 <BME280_compensate_P_int64>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fdbd 	bl	800044c <__aeabi_ui2d>
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	4b23      	ldr	r3, [pc, #140]	@ (8001964 <BME280_Measure+0x108>)
 80018d8:	f7fe ff5c 	bl	8000794 <__aeabi_ddiv>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f7ff f83e 	bl	8000964 <__aeabi_d2f>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001960 <BME280_Measure+0x104>)
 80018ec:	6013      	str	r3, [r2, #0]
            Pressure = (BME280_compensate_P_int32(pRaw));  // Come indicato nel datasheet, la pressione è in Pa
#endif
        }

        // Calcola l'umidità
        if (hRaw == 0x8000)
 80018ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001968 <BME280_Measure+0x10c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018f6:	d104      	bne.n	8001902 <BME280_Measure+0xa6>
        {
            Humidity = 0; // Valore nel caso in cui la misurazione dell'umidità fosse disabilitata, pag 28-29
 80018f8:	4b1c      	ldr	r3, [pc, #112]	@ (800196c <BME280_Measure+0x110>)
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
    else
    {
        // Imposta temperatura, pressione e umidità a 0
        Temperature = Pressure = Humidity = 0;
    }
}
 8001900:	e023      	b.n	800194a <BME280_Measure+0xee>
            Humidity = (bme280_compensate_H_int32(hRaw)) / 1024.0;  // Come indicato nel datasheet, l'umidità è moltiplicata per 1024
 8001902:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <BME280_Measure+0x10c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff3c 	bl	8001784 <bme280_compensate_H_int32>
 800190c:	4603      	mov	r3, r0
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fd9c 	bl	800044c <__aeabi_ui2d>
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <BME280_Measure+0x114>)
 800191a:	f7fe ff3b 	bl	8000794 <__aeabi_ddiv>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f7ff f81d 	bl	8000964 <__aeabi_d2f>
 800192a:	4603      	mov	r3, r0
 800192c:	4a0f      	ldr	r2, [pc, #60]	@ (800196c <BME280_Measure+0x110>)
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	e00b      	b.n	800194a <BME280_Measure+0xee>
        Temperature = Pressure = Humidity = 0;
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <BME280_Measure+0x110>)
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <BME280_Measure+0x110>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a08      	ldr	r2, [pc, #32]	@ (8001960 <BME280_Measure+0x104>)
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b07      	ldr	r3, [pc, #28]	@ (8001960 <BME280_Measure+0x104>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a03      	ldr	r2, [pc, #12]	@ (8001954 <BME280_Measure+0xf8>)
 8001948:	6013      	str	r3, [r2, #0]
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000002c 	.word	0x2000002c
 8001954:	20000438 	.word	0x20000438
 8001958:	40590000 	.word	0x40590000
 800195c:	20000030 	.word	0x20000030
 8001960:	2000043c 	.word	0x2000043c
 8001964:	40700000 	.word	0x40700000
 8001968:	20000034 	.word	0x20000034
 800196c:	20000440 	.word	0x20000440
 8001970:	40900000 	.word	0x40900000

08001974 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
float Temperature, Pressure, Humidity;
uint8_t flag_measurement = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	UNUSED(htim);
	flag_measurement = 1; // Set the flag
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000444 	.word	0x20000444

08001994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800199a:	f000 fbd9 	bl	8002150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199e:	f000 f825 	bl	80019ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a2:	f000 f9a3 	bl	8001cec <MX_GPIO_Init>
  MX_I2C1_Init();
 80019a6:	f000 f883 	bl	8001ab0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80019aa:	f000 f8c1 	bl	8001b30 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80019ae:	f000 f97b 	bl	8001ca8 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80019b2:	f000 f8fb 	bl	8001bac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 80019b6:	2304      	movs	r3, #4
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	2300      	movs	r3, #0
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2303      	movs	r3, #3
 80019c0:	2201      	movs	r2, #1
 80019c2:	2105      	movs	r1, #5
 80019c4:	2002      	movs	r0, #2
 80019c6:	f7ff faaf 	bl	8000f28 <BME280_Config>
  HAL_TIM_Base_Start_IT(&htim2);
 80019ca:	4806      	ldr	r0, [pc, #24]	@ (80019e4 <main+0x50>)
 80019cc:	f003 fa98 	bl	8004f00 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      /* Check if the flag is set */
      if (flag_measurement)
 80019d0:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <main+0x54>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0fb      	beq.n	80019d0 <main+0x3c>
      {
          /* Clear the flag */
          flag_measurement = 0;
 80019d8:	4b03      	ldr	r3, [pc, #12]	@ (80019e8 <main+0x54>)
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
          /* Measure and process data */
          BME280_Measure();
 80019de:	f7ff ff3d 	bl	800185c <BME280_Measure>
      if (flag_measurement)
 80019e2:	e7f5      	b.n	80019d0 <main+0x3c>
 80019e4:	20000118 	.word	0x20000118
 80019e8:	20000444 	.word	0x20000444

080019ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b09e      	sub	sp, #120	@ 0x78
 80019f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80019f6:	2228      	movs	r2, #40	@ 0x28
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f004 f905 	bl	8005c0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a00:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a10:	463b      	mov	r3, r7
 8001a12:	223c      	movs	r2, #60	@ 0x3c
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 f8f7 	bl	8005c0a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a24:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a2e:	2310      	movs	r3, #16
 8001a30:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a32:	2302      	movs	r3, #2
 8001a34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a3a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001a3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a40:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a42:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001a46:	4618      	mov	r0, r3
 8001a48:	f001 fd9a 	bl	8003580 <HAL_RCC_OscConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001a52:	f000 f9c9 	bl	8001de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a56:	230f      	movs	r3, #15
 8001a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a6c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a70:	2101      	movs	r1, #1
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 fdc2 	bl	80045fc <HAL_RCC_ClockConfig>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a7e:	f000 f9b3 	bl	8001de8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8001a82:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <SystemClock_Config+0xc0>)
 8001a84:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001a8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a90:	463b      	mov	r3, r7
 8001a92:	4618      	mov	r0, r3
 8001a94:	f002 ff82 	bl	800499c <HAL_RCCEx_PeriphCLKConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001a9e:	f000 f9a3 	bl	8001de8 <Error_Handler>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	3778      	adds	r7, #120	@ 0x78
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	00020020 	.word	0x00020020

08001ab0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b24 <MX_I2C1_Init+0x74>)
 8001ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b28 <MX_I2C1_Init+0x78>)
 8001ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001aba:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <MX_I2C1_Init+0x74>)
 8001abc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b2c <MX_I2C1_Init+0x7c>)
 8001abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <MX_I2C1_Init+0x74>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ac6:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <MX_I2C1_Init+0x74>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001acc:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <MX_I2C1_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <MX_I2C1_Init+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <MX_I2C1_Init+0x74>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ade:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <MX_I2C1_Init+0x74>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b24 <MX_I2C1_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aea:	480e      	ldr	r0, [pc, #56]	@ (8001b24 <MX_I2C1_Init+0x74>)
 8001aec:	f000 fe5e 	bl	80027ac <HAL_I2C_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001af6:	f000 f977 	bl	8001de8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001afa:	2100      	movs	r1, #0
 8001afc:	4809      	ldr	r0, [pc, #36]	@ (8001b24 <MX_I2C1_Init+0x74>)
 8001afe:	f001 fbe1 	bl	80032c4 <HAL_I2CEx_ConfigAnalogFilter>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b08:	f000 f96e 	bl	8001de8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4805      	ldr	r0, [pc, #20]	@ (8001b24 <MX_I2C1_Init+0x74>)
 8001b10:	f001 fc23 	bl	800335a <HAL_I2CEx_ConfigDigitalFilter>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b1a:	f000 f965 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000060 	.word	0x20000060
 8001b28:	40005400 	.word	0x40005400
 8001b2c:	2000090e 	.word	0x2000090e

08001b30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba4 <MX_SPI1_Init+0x74>)
 8001b36:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba8 <MX_SPI1_Init+0x78>)
 8001b38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba4 <MX_SPI1_Init+0x74>)
 8001b3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b42:	4b18      	ldr	r3, [pc, #96]	@ (8001ba4 <MX_SPI1_Init+0x74>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b48:	4b16      	ldr	r3, [pc, #88]	@ (8001ba4 <MX_SPI1_Init+0x74>)
 8001b4a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001b4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b50:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <MX_SPI1_Init+0x74>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b56:	4b13      	ldr	r3, [pc, #76]	@ (8001ba4 <MX_SPI1_Init+0x74>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <MX_SPI1_Init+0x74>)
 8001b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba4 <MX_SPI1_Init+0x74>)
 8001b66:	2208      	movs	r2, #8
 8001b68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <MX_SPI1_Init+0x74>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <MX_SPI1_Init+0x74>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <MX_SPI1_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <MX_SPI1_Init+0x74>)
 8001b7e:	2207      	movs	r2, #7
 8001b80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b82:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <MX_SPI1_Init+0x74>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b88:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <MX_SPI1_Init+0x74>)
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b8e:	4805      	ldr	r0, [pc, #20]	@ (8001ba4 <MX_SPI1_Init+0x74>)
 8001b90:	f003 f8b4 	bl	8004cfc <HAL_SPI_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b9a:	f000 f925 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200000b4 	.word	0x200000b4
 8001ba8:	40013000 	.word	0x40013000

08001bac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08c      	sub	sp, #48	@ 0x30
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb2:	f107 0320 	add.w	r3, r7, #32
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd8:	4b32      	ldr	r3, [pc, #200]	@ (8001ca4 <MX_TIM2_Init+0xf8>)
 8001bda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 8001be0:	4b30      	ldr	r3, [pc, #192]	@ (8001ca4 <MX_TIM2_Init+0xf8>)
 8001be2:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8001be6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca4 <MX_TIM2_Init+0xf8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001bee:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca4 <MX_TIM2_Init+0xf8>)
 8001bf0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bf4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca4 <MX_TIM2_Init+0xf8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfc:	4b29      	ldr	r3, [pc, #164]	@ (8001ca4 <MX_TIM2_Init+0xf8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c02:	4828      	ldr	r0, [pc, #160]	@ (8001ca4 <MX_TIM2_Init+0xf8>)
 8001c04:	f003 f925 	bl	8004e52 <HAL_TIM_Base_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001c0e:	f000 f8eb 	bl	8001de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c16:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c18:	f107 0320 	add.w	r3, r7, #32
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4821      	ldr	r0, [pc, #132]	@ (8001ca4 <MX_TIM2_Init+0xf8>)
 8001c20:	f003 fbd7 	bl	80053d2 <HAL_TIM_ConfigClockSource>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001c2a:	f000 f8dd 	bl	8001de8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001c2e:	481d      	ldr	r0, [pc, #116]	@ (8001ca4 <MX_TIM2_Init+0xf8>)
 8001c30:	f003 f9d0 	bl	8004fd4 <HAL_TIM_IC_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001c3a:	f000 f8d5 	bl	8001de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4815      	ldr	r0, [pc, #84]	@ (8001ca4 <MX_TIM2_Init+0xf8>)
 8001c4e:	f003 ff05 	bl	8005a5c <HAL_TIMEx_MasterConfigSynchronization>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001c58:	f000 f8c6 	bl	8001de8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c60:	2301      	movs	r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	2200      	movs	r2, #0
 8001c70:	4619      	mov	r1, r3
 8001c72:	480c      	ldr	r0, [pc, #48]	@ (8001ca4 <MX_TIM2_Init+0xf8>)
 8001c74:	f003 fb11 	bl	800529a <HAL_TIM_IC_ConfigChannel>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001c7e:	f000 f8b3 	bl	8001de8 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c82:	2302      	movs	r3, #2
 8001c84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	2204      	movs	r2, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <MX_TIM2_Init+0xf8>)
 8001c8e:	f003 fb04 	bl	800529a <HAL_TIM_IC_ConfigChannel>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001c98:	f000 f8a6 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	3730      	adds	r7, #48	@ 0x30
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000118 	.word	0x20000118

08001ca8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001cac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <MX_USB_PCD_Init+0x3c>)
 8001cae:	4a0e      	ldr	r2, [pc, #56]	@ (8001ce8 <MX_USB_PCD_Init+0x40>)
 8001cb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <MX_USB_PCD_Init+0x3c>)
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <MX_USB_PCD_Init+0x3c>)
 8001cba:	2202      	movs	r2, #2
 8001cbc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <MX_USB_PCD_Init+0x3c>)
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001cc4:	4b07      	ldr	r3, [pc, #28]	@ (8001ce4 <MX_USB_PCD_Init+0x3c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <MX_USB_PCD_Init+0x3c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001cd0:	4804      	ldr	r0, [pc, #16]	@ (8001ce4 <MX_USB_PCD_Init+0x3c>)
 8001cd2:	f001 fb8e 	bl	80033f2 <HAL_PCD_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001cdc:	f000 f884 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000164 	.word	0x20000164
 8001ce8:	40005c00 	.word	0x40005c00

08001cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	@ 0x28
 8001cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
 8001d00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d02:	4b37      	ldr	r3, [pc, #220]	@ (8001de0 <MX_GPIO_Init+0xf4>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	4a36      	ldr	r2, [pc, #216]	@ (8001de0 <MX_GPIO_Init+0xf4>)
 8001d08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d0c:	6153      	str	r3, [r2, #20]
 8001d0e:	4b34      	ldr	r3, [pc, #208]	@ (8001de0 <MX_GPIO_Init+0xf4>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1a:	4b31      	ldr	r3, [pc, #196]	@ (8001de0 <MX_GPIO_Init+0xf4>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4a30      	ldr	r2, [pc, #192]	@ (8001de0 <MX_GPIO_Init+0xf4>)
 8001d20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d24:	6153      	str	r3, [r2, #20]
 8001d26:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <MX_GPIO_Init+0xf4>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d32:	4b2b      	ldr	r3, [pc, #172]	@ (8001de0 <MX_GPIO_Init+0xf4>)
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	4a2a      	ldr	r2, [pc, #168]	@ (8001de0 <MX_GPIO_Init+0xf4>)
 8001d38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d3c:	6153      	str	r3, [r2, #20]
 8001d3e:	4b28      	ldr	r3, [pc, #160]	@ (8001de0 <MX_GPIO_Init+0xf4>)
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	4b25      	ldr	r3, [pc, #148]	@ (8001de0 <MX_GPIO_Init+0xf4>)
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	4a24      	ldr	r2, [pc, #144]	@ (8001de0 <MX_GPIO_Init+0xf4>)
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d54:	6153      	str	r3, [r2, #20]
 8001d56:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <MX_GPIO_Init+0xf4>)
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	4b1f      	ldr	r3, [pc, #124]	@ (8001de0 <MX_GPIO_Init+0xf4>)
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	4a1e      	ldr	r2, [pc, #120]	@ (8001de0 <MX_GPIO_Init+0xf4>)
 8001d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d6c:	6153      	str	r3, [r2, #20]
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001de0 <MX_GPIO_Init+0xf4>)
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8001d80:	4818      	ldr	r0, [pc, #96]	@ (8001de4 <MX_GPIO_Init+0xf8>)
 8001d82:	f000 fcfb 	bl	800277c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001d86:	2337      	movs	r3, #55	@ 0x37
 8001d88:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d8a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4812      	ldr	r0, [pc, #72]	@ (8001de4 <MX_GPIO_Init+0xf8>)
 8001d9c:	f000 fb74 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001da0:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8001da4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	480a      	ldr	r0, [pc, #40]	@ (8001de4 <MX_GPIO_Init+0xf8>)
 8001dba:	f000 fb65 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd4:	f000 fb58 	bl	8002488 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dd8:	bf00      	nop
 8001dda:	3728      	adds	r7, #40	@ 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	48001000 	.word	0x48001000

08001de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dec:	b672      	cpsid	i
}
 8001dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <Error_Handler+0x8>

08001df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <HAL_MspInit+0x44>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8001e38 <HAL_MspInit+0x44>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6193      	str	r3, [r2, #24]
 8001e06:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <HAL_MspInit+0x44>)
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <HAL_MspInit+0x44>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	4a08      	ldr	r2, [pc, #32]	@ (8001e38 <HAL_MspInit+0x44>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	61d3      	str	r3, [r2, #28]
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_MspInit+0x44>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e2a:	2007      	movs	r0, #7
 8001e2c:	f000 faea 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000

08001e3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	@ 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a17      	ldr	r2, [pc, #92]	@ (8001eb8 <HAL_I2C_MspInit+0x7c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d127      	bne.n	8001eae <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5e:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <HAL_I2C_MspInit+0x80>)
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	4a16      	ldr	r2, [pc, #88]	@ (8001ebc <HAL_I2C_MspInit+0x80>)
 8001e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e68:	6153      	str	r3, [r2, #20]
 8001e6a:	4b14      	ldr	r3, [pc, #80]	@ (8001ebc <HAL_I2C_MspInit+0x80>)
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001e76:	23c0      	movs	r3, #192	@ 0xc0
 8001e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e7a:	2312      	movs	r3, #18
 8001e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e86:	2304      	movs	r3, #4
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480b      	ldr	r0, [pc, #44]	@ (8001ec0 <HAL_I2C_MspInit+0x84>)
 8001e92:	f000 faf9 	bl	8002488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e96:	4b09      	ldr	r3, [pc, #36]	@ (8001ebc <HAL_I2C_MspInit+0x80>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4a08      	ldr	r2, [pc, #32]	@ (8001ebc <HAL_I2C_MspInit+0x80>)
 8001e9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ea0:	61d3      	str	r3, [r2, #28]
 8001ea2:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <HAL_I2C_MspInit+0x80>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001eae:	bf00      	nop
 8001eb0:	3728      	adds	r7, #40	@ 0x28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40005400 	.word	0x40005400
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	48000400 	.word	0x48000400

08001ec4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	@ 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a17      	ldr	r2, [pc, #92]	@ (8001f40 <HAL_SPI_MspInit+0x7c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d128      	bne.n	8001f38 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ee6:	4b17      	ldr	r3, [pc, #92]	@ (8001f44 <HAL_SPI_MspInit+0x80>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	4a16      	ldr	r2, [pc, #88]	@ (8001f44 <HAL_SPI_MspInit+0x80>)
 8001eec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ef0:	6193      	str	r3, [r2, #24]
 8001ef2:	4b14      	ldr	r3, [pc, #80]	@ (8001f44 <HAL_SPI_MspInit+0x80>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <HAL_SPI_MspInit+0x80>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	4a10      	ldr	r2, [pc, #64]	@ (8001f44 <HAL_SPI_MspInit+0x80>)
 8001f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f08:	6153      	str	r3, [r2, #20]
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <HAL_SPI_MspInit+0x80>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001f16:	23e0      	movs	r3, #224	@ 0xe0
 8001f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f26:	2305      	movs	r3, #5
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f34:	f000 faa8 	bl	8002488 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f38:	bf00      	nop
 8001f3a:	3728      	adds	r7, #40	@ 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40013000 	.word	0x40013000
 8001f44:	40021000 	.word	0x40021000

08001f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	@ 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f68:	d131      	bne.n	8001fce <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x90>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x90>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	61d3      	str	r3, [r2, #28]
 8001f76:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x90>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x90>)
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	4a14      	ldr	r2, [pc, #80]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x90>)
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f8c:	6153      	str	r3, [r2, #20]
 8001f8e:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x90>)
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fac:	2301      	movs	r3, #1
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fba:	f000 fa65 	bl	8002488 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	201c      	movs	r0, #28
 8001fc4:	f000 fa29 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fc8:	201c      	movs	r0, #28
 8001fca:	f000 fa42 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fce:	bf00      	nop
 8001fd0:	3728      	adds	r7, #40	@ 0x28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000

08001fdc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	@ 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a18      	ldr	r2, [pc, #96]	@ (800205c <HAL_PCD_MspInit+0x80>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d129      	bne.n	8002052 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	4b18      	ldr	r3, [pc, #96]	@ (8002060 <HAL_PCD_MspInit+0x84>)
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	4a17      	ldr	r2, [pc, #92]	@ (8002060 <HAL_PCD_MspInit+0x84>)
 8002004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002008:	6153      	str	r3, [r2, #20]
 800200a:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <HAL_PCD_MspInit+0x84>)
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002016:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800201a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002028:	230e      	movs	r3, #14
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4619      	mov	r1, r3
 8002032:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002036:	f000 fa27 	bl	8002488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800203a:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <HAL_PCD_MspInit+0x84>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	4a08      	ldr	r2, [pc, #32]	@ (8002060 <HAL_PCD_MspInit+0x84>)
 8002040:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002044:	61d3      	str	r3, [r2, #28]
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_PCD_MspInit+0x84>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002052:	bf00      	nop
 8002054:	3728      	adds	r7, #40	@ 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40005c00 	.word	0x40005c00
 8002060:	40021000 	.word	0x40021000

08002064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <NMI_Handler+0x4>

0800206c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <HardFault_Handler+0x4>

08002074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <MemManage_Handler+0x4>

0800207c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <BusFault_Handler+0x4>

08002084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <UsageFault_Handler+0x4>

0800208c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ba:	f000 f88f 	bl	80021dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020c8:	4802      	ldr	r0, [pc, #8]	@ (80020d4 <TIM2_IRQHandler+0x10>)
 80020ca:	f002 ffe4 	bl	8005096 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000118 	.word	0x20000118

080020d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <SystemInit+0x20>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e2:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <SystemInit+0x20>)
 80020e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002134 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002100:	f7ff ffea 	bl	80020d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002104:	480c      	ldr	r0, [pc, #48]	@ (8002138 <LoopForever+0x6>)
  ldr r1, =_edata
 8002106:	490d      	ldr	r1, [pc, #52]	@ (800213c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002108:	4a0d      	ldr	r2, [pc, #52]	@ (8002140 <LoopForever+0xe>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800210c:	e002      	b.n	8002114 <LoopCopyDataInit>

0800210e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002112:	3304      	adds	r3, #4

08002114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002118:	d3f9      	bcc.n	800210e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211a:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <LoopForever+0x12>)
  ldr r4, =_ebss
 800211c:	4c0a      	ldr	r4, [pc, #40]	@ (8002148 <LoopForever+0x16>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002120:	e001      	b.n	8002126 <LoopFillZerobss>

08002122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002124:	3204      	adds	r2, #4

08002126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002128:	d3fb      	bcc.n	8002122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800212a:	f003 fd77 	bl	8005c1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800212e:	f7ff fc31 	bl	8001994 <main>

08002132 <LoopForever>:

LoopForever:
    b LoopForever
 8002132:	e7fe      	b.n	8002132 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002134:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800213c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002140:	08005cbc 	.word	0x08005cbc
  ldr r2, =_sbss
 8002144:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002148:	2000044c 	.word	0x2000044c

0800214c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800214c:	e7fe      	b.n	800214c <ADC1_2_IRQHandler>
	...

08002150 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002154:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <HAL_Init+0x28>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a07      	ldr	r2, [pc, #28]	@ (8002178 <HAL_Init+0x28>)
 800215a:	f043 0310 	orr.w	r3, r3, #16
 800215e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002160:	2003      	movs	r0, #3
 8002162:	f000 f94f 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002166:	2000      	movs	r0, #0
 8002168:	f000 f808 	bl	800217c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800216c:	f7ff fe42 	bl	8001df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40022000 	.word	0x40022000

0800217c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002184:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <HAL_InitTick+0x54>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <HAL_InitTick+0x58>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002192:	fbb3 f3f1 	udiv	r3, r3, r1
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f967 	bl	800246e <HAL_SYSTICK_Config>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00e      	b.n	80021c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b0f      	cmp	r3, #15
 80021ae:	d80a      	bhi.n	80021c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b0:	2200      	movs	r2, #0
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f000 f92f 	bl	800241a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021bc:	4a06      	ldr	r2, [pc, #24]	@ (80021d8 <HAL_InitTick+0x5c>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e000      	b.n	80021c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000008 	.word	0x20000008
 80021d8:	20000004 	.word	0x20000004

080021dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <HAL_IncTick+0x20>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <HAL_IncTick+0x24>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	4a04      	ldr	r2, [pc, #16]	@ (8002200 <HAL_IncTick+0x24>)
 80021ee:	6013      	str	r3, [r2, #0]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	20000008 	.word	0x20000008
 8002200:	20000448 	.word	0x20000448

08002204 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return uwTick;  
 8002208:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <HAL_GetTick+0x14>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000448 	.word	0x20000448

0800221c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002224:	f7ff ffee 	bl	8002204 <HAL_GetTick>
 8002228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d005      	beq.n	8002242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002236:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <HAL_Delay+0x44>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002242:	bf00      	nop
 8002244:	f7ff ffde 	bl	8002204 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	429a      	cmp	r2, r3
 8002252:	d8f7      	bhi.n	8002244 <HAL_Delay+0x28>
  {
  }
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000008 	.word	0x20000008

08002264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002274:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002280:	4013      	ands	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800228c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002296:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	60d3      	str	r3, [r2, #12]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b0:	4b04      	ldr	r3, [pc, #16]	@ (80022c4 <__NVIC_GetPriorityGrouping+0x18>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	f003 0307 	and.w	r3, r3, #7
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	db0b      	blt.n	80022f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	f003 021f 	and.w	r2, r3, #31
 80022e0:	4907      	ldr	r1, [pc, #28]	@ (8002300 <__NVIC_EnableIRQ+0x38>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	2001      	movs	r0, #1
 80022ea:	fa00 f202 	lsl.w	r2, r0, r2
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000e100 	.word	0xe000e100

08002304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	2b00      	cmp	r3, #0
 8002316:	db0a      	blt.n	800232e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	490c      	ldr	r1, [pc, #48]	@ (8002350 <__NVIC_SetPriority+0x4c>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	440b      	add	r3, r1
 8002328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800232c:	e00a      	b.n	8002344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4908      	ldr	r1, [pc, #32]	@ (8002354 <__NVIC_SetPriority+0x50>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3b04      	subs	r3, #4
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	440b      	add	r3, r1
 8002342:	761a      	strb	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000e100 	.word	0xe000e100
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	@ 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f1c3 0307 	rsb	r3, r3, #7
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf28      	it	cs
 8002376:	2304      	movcs	r3, #4
 8002378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3304      	adds	r3, #4
 800237e:	2b06      	cmp	r3, #6
 8002380:	d902      	bls.n	8002388 <NVIC_EncodePriority+0x30>
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3b03      	subs	r3, #3
 8002386:	e000      	b.n	800238a <NVIC_EncodePriority+0x32>
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	f04f 32ff 	mov.w	r2, #4294967295
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	401a      	ands	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a0:	f04f 31ff 	mov.w	r1, #4294967295
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	4313      	orrs	r3, r2
         );
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	@ 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023d0:	d301      	bcc.n	80023d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <SysTick_Config+0x40>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023de:	210f      	movs	r1, #15
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f7ff ff8e 	bl	8002304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <SysTick_Config+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <SysTick_Config+0x40>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff29 	bl	8002264 <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242c:	f7ff ff3e 	bl	80022ac <__NVIC_GetPriorityGrouping>
 8002430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f7ff ff8e 	bl	8002358 <NVIC_EncodePriority>
 800243c:	4602      	mov	r2, r0
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff5d 	bl	8002304 <__NVIC_SetPriority>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff31 	bl	80022c8 <__NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ffa2 	bl	80023c0 <SysTick_Config>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002496:	e154      	b.n	8002742 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2101      	movs	r1, #1
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	4013      	ands	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8146 	beq.w	800273c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d005      	beq.n	80024c8 <HAL_GPIO_Init+0x40>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d130      	bne.n	800252a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024fe:	2201      	movs	r2, #1
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	f003 0201 	and.w	r2, r3, #1
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b03      	cmp	r3, #3
 8002534:	d017      	beq.n	8002566 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	2203      	movs	r2, #3
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d123      	bne.n	80025ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	08da      	lsrs	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3208      	adds	r2, #8
 800257a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	220f      	movs	r2, #15
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	08da      	lsrs	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3208      	adds	r2, #8
 80025b4:	6939      	ldr	r1, [r7, #16]
 80025b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	2203      	movs	r2, #3
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0203 	and.w	r2, r3, #3
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80a0 	beq.w	800273c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fc:	4b58      	ldr	r3, [pc, #352]	@ (8002760 <HAL_GPIO_Init+0x2d8>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4a57      	ldr	r2, [pc, #348]	@ (8002760 <HAL_GPIO_Init+0x2d8>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6193      	str	r3, [r2, #24]
 8002608:	4b55      	ldr	r3, [pc, #340]	@ (8002760 <HAL_GPIO_Init+0x2d8>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002614:	4a53      	ldr	r2, [pc, #332]	@ (8002764 <HAL_GPIO_Init+0x2dc>)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	3302      	adds	r3, #2
 800261c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	220f      	movs	r2, #15
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800263e:	d019      	beq.n	8002674 <HAL_GPIO_Init+0x1ec>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a49      	ldr	r2, [pc, #292]	@ (8002768 <HAL_GPIO_Init+0x2e0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d013      	beq.n	8002670 <HAL_GPIO_Init+0x1e8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a48      	ldr	r2, [pc, #288]	@ (800276c <HAL_GPIO_Init+0x2e4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00d      	beq.n	800266c <HAL_GPIO_Init+0x1e4>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a47      	ldr	r2, [pc, #284]	@ (8002770 <HAL_GPIO_Init+0x2e8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d007      	beq.n	8002668 <HAL_GPIO_Init+0x1e0>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a46      	ldr	r2, [pc, #280]	@ (8002774 <HAL_GPIO_Init+0x2ec>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d101      	bne.n	8002664 <HAL_GPIO_Init+0x1dc>
 8002660:	2304      	movs	r3, #4
 8002662:	e008      	b.n	8002676 <HAL_GPIO_Init+0x1ee>
 8002664:	2305      	movs	r3, #5
 8002666:	e006      	b.n	8002676 <HAL_GPIO_Init+0x1ee>
 8002668:	2303      	movs	r3, #3
 800266a:	e004      	b.n	8002676 <HAL_GPIO_Init+0x1ee>
 800266c:	2302      	movs	r3, #2
 800266e:	e002      	b.n	8002676 <HAL_GPIO_Init+0x1ee>
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_GPIO_Init+0x1ee>
 8002674:	2300      	movs	r3, #0
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	f002 0203 	and.w	r2, r2, #3
 800267c:	0092      	lsls	r2, r2, #2
 800267e:	4093      	lsls	r3, r2
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002686:	4937      	ldr	r1, [pc, #220]	@ (8002764 <HAL_GPIO_Init+0x2dc>)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	3302      	adds	r3, #2
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002694:	4b38      	ldr	r3, [pc, #224]	@ (8002778 <HAL_GPIO_Init+0x2f0>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	43db      	mvns	r3, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002778 <HAL_GPIO_Init+0x2f0>)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026be:	4b2e      	ldr	r3, [pc, #184]	@ (8002778 <HAL_GPIO_Init+0x2f0>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026e2:	4a25      	ldr	r2, [pc, #148]	@ (8002778 <HAL_GPIO_Init+0x2f0>)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026e8:	4b23      	ldr	r3, [pc, #140]	@ (8002778 <HAL_GPIO_Init+0x2f0>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800270c:	4a1a      	ldr	r2, [pc, #104]	@ (8002778 <HAL_GPIO_Init+0x2f0>)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002712:	4b19      	ldr	r3, [pc, #100]	@ (8002778 <HAL_GPIO_Init+0x2f0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	43db      	mvns	r3, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002736:	4a10      	ldr	r2, [pc, #64]	@ (8002778 <HAL_GPIO_Init+0x2f0>)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	3301      	adds	r3, #1
 8002740:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	f47f aea3 	bne.w	8002498 <HAL_GPIO_Init+0x10>
  }
}
 8002752:	bf00      	nop
 8002754:	bf00      	nop
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	40021000 	.word	0x40021000
 8002764:	40010000 	.word	0x40010000
 8002768:	48000400 	.word	0x48000400
 800276c:	48000800 	.word	0x48000800
 8002770:	48000c00 	.word	0x48000c00
 8002774:	48001000 	.word	0x48001000
 8002778:	40010400 	.word	0x40010400

0800277c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
 8002788:	4613      	mov	r3, r2
 800278a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800278c:	787b      	ldrb	r3, [r7, #1]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002798:	e002      	b.n	80027a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e08d      	b.n	80028da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff fb32 	bl	8001e3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2224      	movs	r2, #36	@ 0x24
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800280c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	e006      	b.n	8002834 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002832:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d108      	bne.n	800284e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	e007      	b.n	800285e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800285c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800286c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002870:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002880:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69d9      	ldr	r1, [r3, #28]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1a      	ldr	r2, [r3, #32]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	4608      	mov	r0, r1
 80028ee:	4611      	mov	r1, r2
 80028f0:	461a      	mov	r2, r3
 80028f2:	4603      	mov	r3, r0
 80028f4:	817b      	strh	r3, [r7, #10]
 80028f6:	460b      	mov	r3, r1
 80028f8:	813b      	strh	r3, [r7, #8]
 80028fa:	4613      	mov	r3, r2
 80028fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b20      	cmp	r3, #32
 8002908:	f040 80f9 	bne.w	8002afe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_I2C_Mem_Write+0x34>
 8002912:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800291e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0ed      	b.n	8002b00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_I2C_Mem_Write+0x4e>
 800292e:	2302      	movs	r3, #2
 8002930:	e0e6      	b.n	8002b00 <HAL_I2C_Mem_Write+0x21c>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800293a:	f7ff fc63 	bl	8002204 <HAL_GetTick>
 800293e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	2319      	movs	r3, #25
 8002946:	2201      	movs	r2, #1
 8002948:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fac3 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0d1      	b.n	8002b00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2221      	movs	r2, #33	@ 0x21
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2240      	movs	r2, #64	@ 0x40
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a3a      	ldr	r2, [r7, #32]
 8002976:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800297c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002984:	88f8      	ldrh	r0, [r7, #6]
 8002986:	893a      	ldrh	r2, [r7, #8]
 8002988:	8979      	ldrh	r1, [r7, #10]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	9301      	str	r3, [sp, #4]
 800298e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	4603      	mov	r3, r0
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f9d3 	bl	8002d40 <I2C_RequestMemoryWrite>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0a9      	b.n	8002b00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2bff      	cmp	r3, #255	@ 0xff
 80029b4:	d90e      	bls.n	80029d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	22ff      	movs	r2, #255	@ 0xff
 80029ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	8979      	ldrh	r1, [r7, #10]
 80029c4:	2300      	movs	r3, #0
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 fc47 	bl	8003260 <I2C_TransferConfig>
 80029d2:	e00f      	b.n	80029f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	8979      	ldrh	r1, [r7, #10]
 80029e6:	2300      	movs	r3, #0
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fc36 	bl	8003260 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fac6 	bl	8002f8a <I2C_WaitOnTXISFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e07b      	b.n	8002b00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d034      	beq.n	8002aac <HAL_I2C_Mem_Write+0x1c8>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d130      	bne.n	8002aac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a50:	2200      	movs	r2, #0
 8002a52:	2180      	movs	r1, #128	@ 0x80
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 fa3f 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e04d      	b.n	8002b00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2bff      	cmp	r3, #255	@ 0xff
 8002a6c:	d90e      	bls.n	8002a8c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	22ff      	movs	r2, #255	@ 0xff
 8002a72:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	8979      	ldrh	r1, [r7, #10]
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fbeb 	bl	8003260 <I2C_TransferConfig>
 8002a8a:	e00f      	b.n	8002aac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	8979      	ldrh	r1, [r7, #10]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fbda 	bl	8003260 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d19e      	bne.n	80029f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 faac 	bl	8003018 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e01a      	b.n	8002b00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b0a      	ldr	r3, [pc, #40]	@ (8002b08 <HAL_I2C_Mem_Write+0x224>)
 8002ade:	400b      	ands	r3, r1
 8002ae0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	e000      	b.n	8002b00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
  }
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	fe00e800 	.word	0xfe00e800

08002b0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	4608      	mov	r0, r1
 8002b16:	4611      	mov	r1, r2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	817b      	strh	r3, [r7, #10]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	813b      	strh	r3, [r7, #8]
 8002b22:	4613      	mov	r3, r2
 8002b24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b20      	cmp	r3, #32
 8002b30:	f040 80fd 	bne.w	8002d2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_I2C_Mem_Read+0x34>
 8002b3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d105      	bne.n	8002b4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b46:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0f1      	b.n	8002d30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_I2C_Mem_Read+0x4e>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e0ea      	b.n	8002d30 <HAL_I2C_Mem_Read+0x224>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b62:	f7ff fb4f 	bl	8002204 <HAL_GetTick>
 8002b66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2319      	movs	r3, #25
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f9af 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0d5      	b.n	8002d30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2222      	movs	r2, #34	@ 0x22
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2240      	movs	r2, #64	@ 0x40
 8002b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a3a      	ldr	r2, [r7, #32]
 8002b9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bac:	88f8      	ldrh	r0, [r7, #6]
 8002bae:	893a      	ldrh	r2, [r7, #8]
 8002bb0:	8979      	ldrh	r1, [r7, #10]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	9301      	str	r3, [sp, #4]
 8002bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	4603      	mov	r3, r0
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f913 	bl	8002de8 <I2C_RequestMemoryRead>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0ad      	b.n	8002d30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2bff      	cmp	r3, #255	@ 0xff
 8002bdc:	d90e      	bls.n	8002bfc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	8979      	ldrh	r1, [r7, #10]
 8002bec:	4b52      	ldr	r3, [pc, #328]	@ (8002d38 <HAL_I2C_Mem_Read+0x22c>)
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 fb33 	bl	8003260 <I2C_TransferConfig>
 8002bfa:	e00f      	b.n	8002c1c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	8979      	ldrh	r1, [r7, #10]
 8002c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d38 <HAL_I2C_Mem_Read+0x22c>)
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fb22 	bl	8003260 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c22:	2200      	movs	r2, #0
 8002c24:	2104      	movs	r1, #4
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f956 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e07c      	b.n	8002d30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d034      	beq.n	8002cdc <HAL_I2C_Mem_Read+0x1d0>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d130      	bne.n	8002cdc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c80:	2200      	movs	r2, #0
 8002c82:	2180      	movs	r1, #128	@ 0x80
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 f927 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e04d      	b.n	8002d30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2bff      	cmp	r3, #255	@ 0xff
 8002c9c:	d90e      	bls.n	8002cbc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	8979      	ldrh	r1, [r7, #10]
 8002cac:	2300      	movs	r3, #0
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fad3 	bl	8003260 <I2C_TransferConfig>
 8002cba:	e00f      	b.n	8002cdc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	8979      	ldrh	r1, [r7, #10]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fac2 	bl	8003260 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d19a      	bne.n	8002c1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f994 	bl	8003018 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e01a      	b.n	8002d30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <HAL_I2C_Mem_Read+0x230>)
 8002d0e:	400b      	ands	r3, r1
 8002d10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e000      	b.n	8002d30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d2e:	2302      	movs	r3, #2
  }
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	80002400 	.word	0x80002400
 8002d3c:	fe00e800 	.word	0xfe00e800

08002d40 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	4608      	mov	r0, r1
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	817b      	strh	r3, [r7, #10]
 8002d52:	460b      	mov	r3, r1
 8002d54:	813b      	strh	r3, [r7, #8]
 8002d56:	4613      	mov	r3, r2
 8002d58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	8979      	ldrh	r1, [r7, #10]
 8002d60:	4b20      	ldr	r3, [pc, #128]	@ (8002de4 <I2C_RequestMemoryWrite+0xa4>)
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 fa79 	bl	8003260 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	69b9      	ldr	r1, [r7, #24]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f909 	bl	8002f8a <I2C_WaitOnTXISFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e02c      	b.n	8002ddc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d88:	893b      	ldrh	r3, [r7, #8]
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d92:	e015      	b.n	8002dc0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d94:	893b      	ldrh	r3, [r7, #8]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	69b9      	ldr	r1, [r7, #24]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f8ef 	bl	8002f8a <I2C_WaitOnTXISFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e012      	b.n	8002ddc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002db6:	893b      	ldrh	r3, [r7, #8]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2180      	movs	r1, #128	@ 0x80
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f884 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	80002000 	.word	0x80002000

08002de8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	4608      	mov	r0, r1
 8002df2:	4611      	mov	r1, r2
 8002df4:	461a      	mov	r2, r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	817b      	strh	r3, [r7, #10]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	813b      	strh	r3, [r7, #8]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	8979      	ldrh	r1, [r7, #10]
 8002e08:	4b20      	ldr	r3, [pc, #128]	@ (8002e8c <I2C_RequestMemoryRead+0xa4>)
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fa26 	bl	8003260 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	69b9      	ldr	r1, [r7, #24]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f8b6 	bl	8002f8a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e02c      	b.n	8002e82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d105      	bne.n	8002e3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e2e:	893b      	ldrh	r3, [r7, #8]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e38:	e015      	b.n	8002e66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e3a:	893b      	ldrh	r3, [r7, #8]
 8002e3c:	0a1b      	lsrs	r3, r3, #8
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	69b9      	ldr	r1, [r7, #24]
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f89c 	bl	8002f8a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e012      	b.n	8002e82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e5c:	893b      	ldrh	r3, [r7, #8]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2140      	movs	r1, #64	@ 0x40
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f831 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	80002000 	.word	0x80002000

08002e90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d103      	bne.n	8002eae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d007      	beq.n	8002ecc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	619a      	str	r2, [r3, #24]
  }
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee8:	e03b      	b.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	6839      	ldr	r1, [r7, #0]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f8d6 	bl	80030a0 <I2C_IsErrorOccurred>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e041      	b.n	8002f82 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d02d      	beq.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f06:	f7ff f97d 	bl	8002204 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d302      	bcc.n	8002f1c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d122      	bne.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	4013      	ands	r3, r2
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d113      	bne.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3e:	f043 0220 	orr.w	r2, r3, #32
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00f      	b.n	8002f82 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699a      	ldr	r2, [r3, #24]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	bf0c      	ite	eq
 8002f72:	2301      	moveq	r3, #1
 8002f74:	2300      	movne	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d0b4      	beq.n	8002eea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f96:	e033      	b.n	8003000 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f87f 	bl	80030a0 <I2C_IsErrorOccurred>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e031      	b.n	8003010 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb2:	d025      	beq.n	8003000 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb4:	f7ff f926 	bl	8002204 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d302      	bcc.n	8002fca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d11a      	bne.n	8003000 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d013      	beq.n	8003000 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e007      	b.n	8003010 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b02      	cmp	r3, #2
 800300c:	d1c4      	bne.n	8002f98 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003024:	e02f      	b.n	8003086 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f838 	bl	80030a0 <I2C_IsErrorOccurred>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e02d      	b.n	8003096 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303a:	f7ff f8e3 	bl	8002204 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	429a      	cmp	r2, r3
 8003048:	d302      	bcc.n	8003050 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d11a      	bne.n	8003086 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b20      	cmp	r3, #32
 800305c:	d013      	beq.n	8003086 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	f043 0220 	orr.w	r2, r3, #32
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e007      	b.n	8003096 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b20      	cmp	r3, #32
 8003092:	d1c8      	bne.n	8003026 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	@ 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d068      	beq.n	800319e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2210      	movs	r2, #16
 80030d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030d4:	e049      	b.n	800316a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d045      	beq.n	800316a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7ff f891 	bl	8002204 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <I2C_IsErrorOccurred+0x54>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d13a      	bne.n	800316a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003106:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003112:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003116:	d121      	bne.n	800315c <I2C_IsErrorOccurred+0xbc>
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800311e:	d01d      	beq.n	800315c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003120:	7cfb      	ldrb	r3, [r7, #19]
 8003122:	2b20      	cmp	r3, #32
 8003124:	d01a      	beq.n	800315c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003134:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003136:	f7ff f865 	bl	8002204 <HAL_GetTick>
 800313a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800313c:	e00e      	b.n	800315c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800313e:	f7ff f861 	bl	8002204 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b19      	cmp	r3, #25
 800314a:	d907      	bls.n	800315c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	f043 0320 	orr.w	r3, r3, #32
 8003152:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800315a:	e006      	b.n	800316a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b20      	cmp	r3, #32
 8003168:	d1e9      	bne.n	800313e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b20      	cmp	r3, #32
 8003176:	d003      	beq.n	8003180 <I2C_IsErrorOccurred+0xe0>
 8003178:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0aa      	beq.n	80030d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003184:	2b00      	cmp	r3, #0
 8003186:	d103      	bne.n	8003190 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2220      	movs	r2, #32
 800318e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	f043 0304 	orr.w	r3, r3, #4
 8003196:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	f043 0308 	orr.w	r3, r3, #8
 80031d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00b      	beq.n	800320c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	f043 0302 	orr.w	r3, r3, #2
 80031fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003204:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800320c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01c      	beq.n	800324e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f7ff fe3b 	bl	8002e90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4b0d      	ldr	r3, [pc, #52]	@ (800325c <I2C_IsErrorOccurred+0x1bc>)
 8003226:	400b      	ands	r3, r1
 8003228:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	431a      	orrs	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800324e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003252:	4618      	mov	r0, r3
 8003254:	3728      	adds	r7, #40	@ 0x28
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	fe00e800 	.word	0xfe00e800

08003260 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	607b      	str	r3, [r7, #4]
 800326a:	460b      	mov	r3, r1
 800326c:	817b      	strh	r3, [r7, #10]
 800326e:	4613      	mov	r3, r2
 8003270:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003272:	897b      	ldrh	r3, [r7, #10]
 8003274:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003278:	7a7b      	ldrb	r3, [r7, #9]
 800327a:	041b      	lsls	r3, r3, #16
 800327c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003280:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	4313      	orrs	r3, r2
 800328a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800328e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	0d5b      	lsrs	r3, r3, #21
 800329a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800329e:	4b08      	ldr	r3, [pc, #32]	@ (80032c0 <I2C_TransferConfig+0x60>)
 80032a0:	430b      	orrs	r3, r1
 80032a2:	43db      	mvns	r3, r3
 80032a4:	ea02 0103 	and.w	r1, r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	03ff63ff 	.word	0x03ff63ff

080032c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d138      	bne.n	800334c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e032      	b.n	800334e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2224      	movs	r2, #36	@ 0x24
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003316:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6819      	ldr	r1, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	e000      	b.n	800334e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800334c:	2302      	movs	r3, #2
  }
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800335a:	b480      	push	{r7}
 800335c:	b085      	sub	sp, #20
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b20      	cmp	r3, #32
 800336e:	d139      	bne.n	80033e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800337a:	2302      	movs	r3, #2
 800337c:	e033      	b.n	80033e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2224      	movs	r2, #36	@ 0x24
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e000      	b.n	80033e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033e4:	2302      	movs	r3, #2
  }
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0b9      	b.n	8003578 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d106      	bne.n	800341e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7fe fddf 	bl	8001fdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2203      	movs	r2, #3
 8003422:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f002 fbb4 	bl	8005b98 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003430:	2300      	movs	r3, #0
 8003432:	73fb      	strb	r3, [r7, #15]
 8003434:	e03e      	b.n	80034b4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003436:	7bfa      	ldrb	r2, [r7, #15]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	440b      	add	r3, r1
 8003444:	3311      	adds	r3, #17
 8003446:	2201      	movs	r2, #1
 8003448:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800344a:	7bfa      	ldrb	r2, [r7, #15]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	440b      	add	r3, r1
 8003458:	3310      	adds	r3, #16
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	440b      	add	r3, r1
 800346c:	3313      	adds	r3, #19
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003472:	7bfa      	ldrb	r2, [r7, #15]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	440b      	add	r3, r1
 8003480:	3320      	adds	r3, #32
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	440b      	add	r3, r1
 8003494:	3324      	adds	r3, #36	@ 0x24
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	440b      	add	r3, r1
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	3301      	adds	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	791b      	ldrb	r3, [r3, #4]
 80034b8:	7bfa      	ldrb	r2, [r7, #15]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d3bb      	bcc.n	8003436 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034be:	2300      	movs	r3, #0
 80034c0:	73fb      	strb	r3, [r7, #15]
 80034c2:	e044      	b.n	800354e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	440b      	add	r3, r1
 80034d2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80034d6:	2200      	movs	r2, #0
 80034d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	440b      	add	r3, r1
 80034e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003502:	2200      	movs	r2, #0
 8003504:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	440b      	add	r3, r1
 8003514:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	440b      	add	r3, r1
 800352a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003532:	7bfa      	ldrb	r2, [r7, #15]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	440b      	add	r3, r1
 8003540:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	3301      	adds	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	791b      	ldrb	r3, [r3, #4]
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	429a      	cmp	r2, r3
 8003556:	d3b5      	bcc.n	80034c4 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003564:	f002 fb33 	bl	8005bce <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003586:	af00      	add	r7, sp, #0
 8003588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003590:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003596:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f001 b823 	b.w	80045ec <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 817d 	beq.w	80038b6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80035bc:	4bbc      	ldr	r3, [pc, #752]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 030c 	and.w	r3, r3, #12
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d00c      	beq.n	80035e2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035c8:	4bb9      	ldr	r3, [pc, #740]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d15c      	bne.n	800368e <HAL_RCC_OscConfig+0x10e>
 80035d4:	4bb6      	ldr	r3, [pc, #728]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e0:	d155      	bne.n	800368e <HAL_RCC_OscConfig+0x10e>
 80035e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035e6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035f6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b01      	cmp	r3, #1
 800360c:	d102      	bne.n	8003614 <HAL_RCC_OscConfig+0x94>
 800360e:	4ba8      	ldr	r3, [pc, #672]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	e015      	b.n	8003640 <HAL_RCC_OscConfig+0xc0>
 8003614:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003618:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003628:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800362c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003630:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003634:	fa93 f3a3 	rbit	r3, r3
 8003638:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800363c:	4b9c      	ldr	r3, [pc, #624]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003644:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003648:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800364c:	fa92 f2a2 	rbit	r2, r2
 8003650:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003654:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003658:	fab2 f282 	clz	r2, r2
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	f042 0220 	orr.w	r2, r2, #32
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	f002 021f 	and.w	r2, r2, #31
 8003668:	2101      	movs	r1, #1
 800366a:	fa01 f202 	lsl.w	r2, r1, r2
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 811f 	beq.w	80038b4 <HAL_RCC_OscConfig+0x334>
 8003676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f040 8116 	bne.w	80038b4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	f000 bfaf 	b.w	80045ec <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800368e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003692:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800369e:	d106      	bne.n	80036ae <HAL_RCC_OscConfig+0x12e>
 80036a0:	4b83      	ldr	r3, [pc, #524]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a82      	ldr	r2, [pc, #520]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 80036a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	e036      	b.n	800371c <HAL_RCC_OscConfig+0x19c>
 80036ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x158>
 80036be:	4b7c      	ldr	r3, [pc, #496]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a7b      	ldr	r2, [pc, #492]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4b79      	ldr	r3, [pc, #484]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a78      	ldr	r2, [pc, #480]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 80036d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e021      	b.n	800371c <HAL_RCC_OscConfig+0x19c>
 80036d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036e8:	d10c      	bne.n	8003704 <HAL_RCC_OscConfig+0x184>
 80036ea:	4b71      	ldr	r3, [pc, #452]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a70      	ldr	r2, [pc, #448]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 80036f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	4b6e      	ldr	r3, [pc, #440]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a6d      	ldr	r2, [pc, #436]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e00b      	b.n	800371c <HAL_RCC_OscConfig+0x19c>
 8003704:	4b6a      	ldr	r3, [pc, #424]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a69      	ldr	r2, [pc, #420]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 800370a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	4b67      	ldr	r3, [pc, #412]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a66      	ldr	r2, [pc, #408]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 8003716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800371a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800371c:	4b64      	ldr	r3, [pc, #400]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	f023 020f 	bic.w	r2, r3, #15
 8003724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003728:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	495f      	ldr	r1, [pc, #380]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 8003732:	4313      	orrs	r3, r2
 8003734:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d059      	beq.n	80037fa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fe fd5d 	bl	8002204 <HAL_GetTick>
 800374a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	e00a      	b.n	8003766 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003750:	f7fe fd58 	bl	8002204 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b64      	cmp	r3, #100	@ 0x64
 800375e:	d902      	bls.n	8003766 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	f000 bf43 	b.w	80045ec <HAL_RCC_OscConfig+0x106c>
 8003766:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800376a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003772:	fa93 f3a3 	rbit	r3, r3
 8003776:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800377a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	d102      	bne.n	8003798 <HAL_RCC_OscConfig+0x218>
 8003792:	4b47      	ldr	r3, [pc, #284]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	e015      	b.n	80037c4 <HAL_RCC_OscConfig+0x244>
 8003798:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800379c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80037ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037b0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80037b4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80037b8:	fa93 f3a3 	rbit	r3, r3
 80037bc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80037c0:	4b3b      	ldr	r3, [pc, #236]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037c8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80037cc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80037d0:	fa92 f2a2 	rbit	r2, r2
 80037d4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80037d8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80037dc:	fab2 f282 	clz	r2, r2
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	f042 0220 	orr.w	r2, r2, #32
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	f002 021f 	and.w	r2, r2, #31
 80037ec:	2101      	movs	r1, #1
 80037ee:	fa01 f202 	lsl.w	r2, r1, r2
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0ab      	beq.n	8003750 <HAL_RCC_OscConfig+0x1d0>
 80037f8:	e05d      	b.n	80038b6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fa:	f7fe fd03 	bl	8002204 <HAL_GetTick>
 80037fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003802:	e00a      	b.n	800381a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003804:	f7fe fcfe 	bl	8002204 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b64      	cmp	r3, #100	@ 0x64
 8003812:	d902      	bls.n	800381a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	f000 bee9 	b.w	80045ec <HAL_RCC_OscConfig+0x106c>
 800381a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800381e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800382e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	d102      	bne.n	800384c <HAL_RCC_OscConfig+0x2cc>
 8003846:	4b1a      	ldr	r3, [pc, #104]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	e015      	b.n	8003878 <HAL_RCC_OscConfig+0x2f8>
 800384c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003850:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003854:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003858:	fa93 f3a3 	rbit	r3, r3
 800385c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003860:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003864:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003868:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800386c:	fa93 f3a3 	rbit	r3, r3
 8003870:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003874:	4b0e      	ldr	r3, [pc, #56]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800387c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003880:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003884:	fa92 f2a2 	rbit	r2, r2
 8003888:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800388c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003890:	fab2 f282 	clz	r2, r2
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	f042 0220 	orr.w	r2, r2, #32
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	f002 021f 	and.w	r2, r2, #31
 80038a0:	2101      	movs	r1, #1
 80038a2:	fa01 f202 	lsl.w	r2, r1, r2
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ab      	bne.n	8003804 <HAL_RCC_OscConfig+0x284>
 80038ac:	e003      	b.n	80038b6 <HAL_RCC_OscConfig+0x336>
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 817d 	beq.w	8003bc6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80038cc:	4ba6      	ldr	r3, [pc, #664]	@ (8003b68 <HAL_RCC_OscConfig+0x5e8>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00b      	beq.n	80038f0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80038d8:	4ba3      	ldr	r3, [pc, #652]	@ (8003b68 <HAL_RCC_OscConfig+0x5e8>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 030c 	and.w	r3, r3, #12
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d172      	bne.n	80039ca <HAL_RCC_OscConfig+0x44a>
 80038e4:	4ba0      	ldr	r3, [pc, #640]	@ (8003b68 <HAL_RCC_OscConfig+0x5e8>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d16c      	bne.n	80039ca <HAL_RCC_OscConfig+0x44a>
 80038f0:	2302      	movs	r3, #2
 80038f2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80038fa:	fa93 f3a3 	rbit	r3, r3
 80038fe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003902:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003906:	fab3 f383 	clz	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d102      	bne.n	8003920 <HAL_RCC_OscConfig+0x3a0>
 800391a:	4b93      	ldr	r3, [pc, #588]	@ (8003b68 <HAL_RCC_OscConfig+0x5e8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	e013      	b.n	8003948 <HAL_RCC_OscConfig+0x3c8>
 8003920:	2302      	movs	r3, #2
 8003922:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003932:	2302      	movs	r3, #2
 8003934:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003938:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800393c:	fa93 f3a3 	rbit	r3, r3
 8003940:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003944:	4b88      	ldr	r3, [pc, #544]	@ (8003b68 <HAL_RCC_OscConfig+0x5e8>)
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	2202      	movs	r2, #2
 800394a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800394e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003952:	fa92 f2a2 	rbit	r2, r2
 8003956:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800395a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800395e:	fab2 f282 	clz	r2, r2
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	f042 0220 	orr.w	r2, r2, #32
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	f002 021f 	and.w	r2, r2, #31
 800396e:	2101      	movs	r1, #1
 8003970:	fa01 f202 	lsl.w	r2, r1, r2
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_RCC_OscConfig+0x410>
 800397a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d002      	beq.n	8003990 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	f000 be2e 	b.w	80045ec <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003990:	4b75      	ldr	r3, [pc, #468]	@ (8003b68 <HAL_RCC_OscConfig+0x5e8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800399c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	21f8      	movs	r1, #248	@ 0xf8
 80039a6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80039ae:	fa91 f1a1 	rbit	r1, r1
 80039b2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80039b6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80039ba:	fab1 f181 	clz	r1, r1
 80039be:	b2c9      	uxtb	r1, r1
 80039c0:	408b      	lsls	r3, r1
 80039c2:	4969      	ldr	r1, [pc, #420]	@ (8003b68 <HAL_RCC_OscConfig+0x5e8>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c8:	e0fd      	b.n	8003bc6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8088 	beq.w	8003aec <HAL_RCC_OscConfig+0x56c>
 80039dc:	2301      	movs	r3, #1
 80039de:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80039ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f2:	fab3 f383 	clz	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80039fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	461a      	mov	r2, r3
 8003a04:	2301      	movs	r3, #1
 8003a06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fe fbfc 	bl	8002204 <HAL_GetTick>
 8003a0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a10:	e00a      	b.n	8003a28 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a12:	f7fe fbf7 	bl	8002204 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d902      	bls.n	8003a28 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	f000 bde2 	b.w	80045ec <HAL_RCC_OscConfig+0x106c>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003a32:	fa93 f3a3 	rbit	r3, r3
 8003a36:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003a3a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d102      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4d8>
 8003a52:	4b45      	ldr	r3, [pc, #276]	@ (8003b68 <HAL_RCC_OscConfig+0x5e8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	e013      	b.n	8003a80 <HAL_RCC_OscConfig+0x500>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003a70:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003a74:	fa93 f3a3 	rbit	r3, r3
 8003a78:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003a7c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b68 <HAL_RCC_OscConfig+0x5e8>)
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	2202      	movs	r2, #2
 8003a82:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003a86:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003a8a:	fa92 f2a2 	rbit	r2, r2
 8003a8e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003a92:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003a96:	fab2 f282 	clz	r2, r2
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	f042 0220 	orr.w	r2, r2, #32
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	f002 021f 	and.w	r2, r2, #31
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0af      	beq.n	8003a12 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b68 <HAL_RCC_OscConfig+0x5e8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003abe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	21f8      	movs	r1, #248	@ 0xf8
 8003ac8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003acc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003ad0:	fa91 f1a1 	rbit	r1, r1
 8003ad4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003ad8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003adc:	fab1 f181 	clz	r1, r1
 8003ae0:	b2c9      	uxtb	r1, r1
 8003ae2:	408b      	lsls	r3, r1
 8003ae4:	4920      	ldr	r1, [pc, #128]	@ (8003b68 <HAL_RCC_OscConfig+0x5e8>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	600b      	str	r3, [r1, #0]
 8003aea:	e06c      	b.n	8003bc6 <HAL_RCC_OscConfig+0x646>
 8003aec:	2301      	movs	r3, #1
 8003aee:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003afe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003b0c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	461a      	mov	r2, r3
 8003b14:	2300      	movs	r3, #0
 8003b16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7fe fb74 	bl	8002204 <HAL_GetTick>
 8003b1c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b20:	e00a      	b.n	8003b38 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b22:	f7fe fb6f 	bl	8002204 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d902      	bls.n	8003b38 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	f000 bd5a 	b.w	80045ec <HAL_RCC_OscConfig+0x106c>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4e:	fab3 f383 	clz	r3, r3
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d104      	bne.n	8003b6c <HAL_RCC_OscConfig+0x5ec>
 8003b62:	4b01      	ldr	r3, [pc, #4]	@ (8003b68 <HAL_RCC_OscConfig+0x5e8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	e015      	b.n	8003b94 <HAL_RCC_OscConfig+0x614>
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003b76:	fa93 f3a3 	rbit	r3, r3
 8003b7a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003b7e:	2302      	movs	r3, #2
 8003b80:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003b84:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b88:	fa93 f3a3 	rbit	r3, r3
 8003b8c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003b90:	4bc8      	ldr	r3, [pc, #800]	@ (8003eb4 <HAL_RCC_OscConfig+0x934>)
 8003b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b94:	2202      	movs	r2, #2
 8003b96:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003b9a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003b9e:	fa92 f2a2 	rbit	r2, r2
 8003ba2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003ba6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003baa:	fab2 f282 	clz	r2, r2
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	f042 0220 	orr.w	r2, r2, #32
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	f002 021f 	and.w	r2, r2, #31
 8003bba:	2101      	movs	r1, #1
 8003bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1ad      	bne.n	8003b22 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 8110 	beq.w	8003dfc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d079      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x760>
 8003bec:	2301      	movs	r3, #1
 8003bee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c02:	fab3 f383 	clz	r3, r3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4bab      	ldr	r3, [pc, #684]	@ (8003eb8 <HAL_RCC_OscConfig+0x938>)
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	461a      	mov	r2, r3
 8003c12:	2301      	movs	r3, #1
 8003c14:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c16:	f7fe faf5 	bl	8002204 <HAL_GetTick>
 8003c1a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c20:	f7fe faf0 	bl	8002204 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d902      	bls.n	8003c36 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	f000 bcdb 	b.w	80045ec <HAL_RCC_OscConfig+0x106c>
 8003c36:	2302      	movs	r3, #2
 8003c38:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003c40:	fa93 f3a3 	rbit	r3, r3
 8003c44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003c50:	2202      	movs	r2, #2
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c58:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	fa93 f2a3 	rbit	r2, r3
 8003c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c74:	2202      	movs	r2, #2
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	fa93 f2a3 	rbit	r2, r3
 8003c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003c8e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c90:	4b88      	ldr	r3, [pc, #544]	@ (8003eb4 <HAL_RCC_OscConfig+0x934>)
 8003c92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	6019      	str	r1, [r3, #0]
 8003ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	fa93 f1a3 	rbit	r1, r3
 8003cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003cb6:	6019      	str	r1, [r3, #0]
  return result;
 8003cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cbc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	f003 031f 	and.w	r3, r3, #31
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0a0      	beq.n	8003c20 <HAL_RCC_OscConfig+0x6a0>
 8003cde:	e08d      	b.n	8003dfc <HAL_RCC_OscConfig+0x87c>
 8003ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	fa93 f2a3 	rbit	r2, r3
 8003cfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cfe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003d02:	601a      	str	r2, [r3, #0]
  return result;
 8003d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d08:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003d0c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d0e:	fab3 f383 	clz	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	4b68      	ldr	r3, [pc, #416]	@ (8003eb8 <HAL_RCC_OscConfig+0x938>)
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	2300      	movs	r3, #0
 8003d20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d22:	f7fe fa6f 	bl	8002204 <HAL_GetTick>
 8003d26:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d2c:	f7fe fa6a 	bl	8002204 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d902      	bls.n	8003d42 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	f000 bc55 	b.w	80045ec <HAL_RCC_OscConfig+0x106c>
 8003d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d46:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d52:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	fa93 f2a3 	rbit	r2, r3
 8003d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d60:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003d6e:	2202      	movs	r2, #2
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d76:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	fa93 f2a3 	rbit	r2, r3
 8003d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003d92:	2202      	movs	r2, #2
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d9a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	fa93 f2a3 	rbit	r2, r3
 8003da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003dac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dae:	4b41      	ldr	r3, [pc, #260]	@ (8003eb4 <HAL_RCC_OscConfig+0x934>)
 8003db0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003dba:	2102      	movs	r1, #2
 8003dbc:	6019      	str	r1, [r3, #0]
 8003dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dc2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	fa93 f1a3 	rbit	r1, r3
 8003dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003dd4:	6019      	str	r1, [r3, #0]
  return result;
 8003dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dda:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	fab3 f383 	clz	r3, r3
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	2101      	movs	r1, #1
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d197      	bne.n	8003d2c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 81a1 	beq.w	8004154 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e18:	4b26      	ldr	r3, [pc, #152]	@ (8003eb4 <HAL_RCC_OscConfig+0x934>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d116      	bne.n	8003e52 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e24:	4b23      	ldr	r3, [pc, #140]	@ (8003eb4 <HAL_RCC_OscConfig+0x934>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	4a22      	ldr	r2, [pc, #136]	@ (8003eb4 <HAL_RCC_OscConfig+0x934>)
 8003e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e2e:	61d3      	str	r3, [r2, #28]
 8003e30:	4b20      	ldr	r3, [pc, #128]	@ (8003eb4 <HAL_RCC_OscConfig+0x934>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e3c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e46:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003e4a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e52:	4b1a      	ldr	r3, [pc, #104]	@ (8003ebc <HAL_RCC_OscConfig+0x93c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11a      	bne.n	8003e94 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e5e:	4b17      	ldr	r3, [pc, #92]	@ (8003ebc <HAL_RCC_OscConfig+0x93c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a16      	ldr	r2, [pc, #88]	@ (8003ebc <HAL_RCC_OscConfig+0x93c>)
 8003e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6a:	f7fe f9cb 	bl	8002204 <HAL_GetTick>
 8003e6e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e72:	e009      	b.n	8003e88 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e74:	f7fe f9c6 	bl	8002204 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b64      	cmp	r3, #100	@ 0x64
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e3b1      	b.n	80045ec <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e88:	4b0c      	ldr	r3, [pc, #48]	@ (8003ebc <HAL_RCC_OscConfig+0x93c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ef      	beq.n	8003e74 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d10d      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x940>
 8003ea4:	4b03      	ldr	r3, [pc, #12]	@ (8003eb4 <HAL_RCC_OscConfig+0x934>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4a02      	ldr	r2, [pc, #8]	@ (8003eb4 <HAL_RCC_OscConfig+0x934>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6213      	str	r3, [r2, #32]
 8003eb0:	e03c      	b.n	8003f2c <HAL_RCC_OscConfig+0x9ac>
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	10908120 	.word	0x10908120
 8003ebc:	40007000 	.word	0x40007000
 8003ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10c      	bne.n	8003eea <HAL_RCC_OscConfig+0x96a>
 8003ed0:	4bc1      	ldr	r3, [pc, #772]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	4ac0      	ldr	r2, [pc, #768]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	6213      	str	r3, [r2, #32]
 8003edc:	4bbe      	ldr	r3, [pc, #760]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	4abd      	ldr	r2, [pc, #756]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 8003ee2:	f023 0304 	bic.w	r3, r3, #4
 8003ee6:	6213      	str	r3, [r2, #32]
 8003ee8:	e020      	b.n	8003f2c <HAL_RCC_OscConfig+0x9ac>
 8003eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	2b05      	cmp	r3, #5
 8003ef8:	d10c      	bne.n	8003f14 <HAL_RCC_OscConfig+0x994>
 8003efa:	4bb7      	ldr	r3, [pc, #732]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	4ab6      	ldr	r2, [pc, #728]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 8003f00:	f043 0304 	orr.w	r3, r3, #4
 8003f04:	6213      	str	r3, [r2, #32]
 8003f06:	4bb4      	ldr	r3, [pc, #720]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	4ab3      	ldr	r2, [pc, #716]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	6213      	str	r3, [r2, #32]
 8003f12:	e00b      	b.n	8003f2c <HAL_RCC_OscConfig+0x9ac>
 8003f14:	4bb0      	ldr	r3, [pc, #704]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	4aaf      	ldr	r2, [pc, #700]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	6213      	str	r3, [r2, #32]
 8003f20:	4bad      	ldr	r3, [pc, #692]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	4aac      	ldr	r2, [pc, #688]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 8003f26:	f023 0304 	bic.w	r3, r3, #4
 8003f2a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8081 	beq.w	8004040 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3e:	f7fe f961 	bl	8002204 <HAL_GetTick>
 8003f42:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f46:	e00b      	b.n	8003f60 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f48:	f7fe f95c 	bl	8002204 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e345      	b.n	80045ec <HAL_RCC_OscConfig+0x106c>
 8003f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f64:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003f68:	2202      	movs	r2, #2
 8003f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f70:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	fa93 f2a3 	rbit	r2, r3
 8003f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f7e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f88:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f94:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	fa93 f2a3 	rbit	r2, r3
 8003f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003fa6:	601a      	str	r2, [r3, #0]
  return result;
 8003fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fac:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003fb0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb2:	fab3 f383 	clz	r3, r3
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	f043 0302 	orr.w	r3, r3, #2
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d102      	bne.n	8003fcc <HAL_RCC_OscConfig+0xa4c>
 8003fc6:	4b84      	ldr	r3, [pc, #528]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	e013      	b.n	8003ff4 <HAL_RCC_OscConfig+0xa74>
 8003fcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fdc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	fa93 f2a3 	rbit	r2, r3
 8003fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fea:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	4b79      	ldr	r3, [pc, #484]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ff8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003ffc:	2102      	movs	r1, #2
 8003ffe:	6011      	str	r1, [r2, #0]
 8004000:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004004:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	fa92 f1a2 	rbit	r1, r2
 800400e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004012:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004016:	6011      	str	r1, [r2, #0]
  return result;
 8004018:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800401c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	fab2 f282 	clz	r2, r2
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	f002 021f 	and.w	r2, r2, #31
 8004032:	2101      	movs	r1, #1
 8004034:	fa01 f202 	lsl.w	r2, r1, r2
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d084      	beq.n	8003f48 <HAL_RCC_OscConfig+0x9c8>
 800403e:	e07f      	b.n	8004140 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004040:	f7fe f8e0 	bl	8002204 <HAL_GetTick>
 8004044:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004048:	e00b      	b.n	8004062 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fe f8db 	bl	8002204 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e2c4      	b.n	80045ec <HAL_RCC_OscConfig+0x106c>
 8004062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004066:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800406a:	2202      	movs	r2, #2
 800406c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004072:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	fa93 f2a3 	rbit	r2, r3
 800407c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004080:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800408a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800408e:	2202      	movs	r2, #2
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004096:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	fa93 f2a3 	rbit	r2, r3
 80040a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80040a8:	601a      	str	r2, [r3, #0]
  return result;
 80040aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ae:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80040b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b4:	fab3 f383 	clz	r3, r3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f043 0302 	orr.w	r3, r3, #2
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d102      	bne.n	80040ce <HAL_RCC_OscConfig+0xb4e>
 80040c8:	4b43      	ldr	r3, [pc, #268]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	e013      	b.n	80040f6 <HAL_RCC_OscConfig+0xb76>
 80040ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80040d6:	2202      	movs	r2, #2
 80040d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040de:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	fa93 f2a3 	rbit	r2, r3
 80040e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ec:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	4b39      	ldr	r3, [pc, #228]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040fa:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80040fe:	2102      	movs	r1, #2
 8004100:	6011      	str	r1, [r2, #0]
 8004102:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004106:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	fa92 f1a2 	rbit	r1, r2
 8004110:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004114:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004118:	6011      	str	r1, [r2, #0]
  return result;
 800411a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800411e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	fab2 f282 	clz	r2, r2
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	f002 021f 	and.w	r2, r2, #31
 8004134:	2101      	movs	r1, #1
 8004136:	fa01 f202 	lsl.w	r2, r1, r2
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d184      	bne.n	800404a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004140:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004144:	2b01      	cmp	r3, #1
 8004146:	d105      	bne.n	8004154 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004148:	4b23      	ldr	r3, [pc, #140]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	4a22      	ldr	r2, [pc, #136]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 800414e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004152:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004158:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8242 	beq.w	80045ea <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004166:	4b1c      	ldr	r3, [pc, #112]	@ (80041d8 <HAL_RCC_OscConfig+0xc58>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b08      	cmp	r3, #8
 8004170:	f000 8213 	beq.w	800459a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004178:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	2b02      	cmp	r3, #2
 8004182:	f040 8162 	bne.w	800444a <HAL_RCC_OscConfig+0xeca>
 8004186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800418a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800418e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004198:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	fa93 f2a3 	rbit	r2, r3
 80041a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80041aa:	601a      	str	r2, [r3, #0]
  return result;
 80041ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80041b4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b6:	fab3 f383 	clz	r3, r3
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80041c0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	461a      	mov	r2, r3
 80041c8:	2300      	movs	r3, #0
 80041ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fe f81a 	bl	8002204 <HAL_GetTick>
 80041d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041d4:	e00c      	b.n	80041f0 <HAL_RCC_OscConfig+0xc70>
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041dc:	f7fe f812 	bl	8002204 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e1fd      	b.n	80045ec <HAL_RCC_OscConfig+0x106c>
 80041f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041f4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80041f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004202:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	fa93 f2a3 	rbit	r2, r3
 800420c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004210:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004214:	601a      	str	r2, [r3, #0]
  return result;
 8004216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800421a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800421e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004220:	fab3 f383 	clz	r3, r3
 8004224:	b2db      	uxtb	r3, r3
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	d102      	bne.n	800423a <HAL_RCC_OscConfig+0xcba>
 8004234:	4bb0      	ldr	r3, [pc, #704]	@ (80044f8 <HAL_RCC_OscConfig+0xf78>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	e027      	b.n	800428a <HAL_RCC_OscConfig+0xd0a>
 800423a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800423e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004242:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800424c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	fa93 f2a3 	rbit	r2, r3
 8004256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800425a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004264:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004268:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004272:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	fa93 f2a3 	rbit	r2, r3
 800427c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004280:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	4b9c      	ldr	r3, [pc, #624]	@ (80044f8 <HAL_RCC_OscConfig+0xf78>)
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800428e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004292:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004296:	6011      	str	r1, [r2, #0]
 8004298:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800429c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80042a0:	6812      	ldr	r2, [r2, #0]
 80042a2:	fa92 f1a2 	rbit	r1, r2
 80042a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042aa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80042ae:	6011      	str	r1, [r2, #0]
  return result;
 80042b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042b4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	fab2 f282 	clz	r2, r2
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	f042 0220 	orr.w	r2, r2, #32
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	f002 021f 	and.w	r2, r2, #31
 80042ca:	2101      	movs	r1, #1
 80042cc:	fa01 f202 	lsl.w	r2, r1, r2
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d182      	bne.n	80041dc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042d6:	4b88      	ldr	r3, [pc, #544]	@ (80044f8 <HAL_RCC_OscConfig+0xf78>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80042de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80042ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	430b      	orrs	r3, r1
 80042f8:	497f      	ldr	r1, [pc, #508]	@ (80044f8 <HAL_RCC_OscConfig+0xf78>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	604b      	str	r3, [r1, #4]
 80042fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004302:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004306:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800430a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004310:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	fa93 f2a3 	rbit	r2, r3
 800431a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800431e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004322:	601a      	str	r2, [r3, #0]
  return result;
 8004324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004328:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800432c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004338:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	461a      	mov	r2, r3
 8004340:	2301      	movs	r3, #1
 8004342:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fd ff5e 	bl	8002204 <HAL_GetTick>
 8004348:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800434c:	e009      	b.n	8004362 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434e:	f7fd ff59 	bl	8002204 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e144      	b.n	80045ec <HAL_RCC_OscConfig+0x106c>
 8004362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004366:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800436a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800436e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004374:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	fa93 f2a3 	rbit	r2, r3
 800437e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004382:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004386:	601a      	str	r2, [r3, #0]
  return result;
 8004388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800438c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004390:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d102      	bne.n	80043ac <HAL_RCC_OscConfig+0xe2c>
 80043a6:	4b54      	ldr	r3, [pc, #336]	@ (80044f8 <HAL_RCC_OscConfig+0xf78>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	e027      	b.n	80043fc <HAL_RCC_OscConfig+0xe7c>
 80043ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80043b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043be:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	fa93 f2a3 	rbit	r2, r3
 80043c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043cc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80043da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	fa93 f2a3 	rbit	r2, r3
 80043ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043f2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	4b3f      	ldr	r3, [pc, #252]	@ (80044f8 <HAL_RCC_OscConfig+0xf78>)
 80043fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004400:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004404:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004408:	6011      	str	r1, [r2, #0]
 800440a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800440e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	fa92 f1a2 	rbit	r1, r2
 8004418:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800441c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004420:	6011      	str	r1, [r2, #0]
  return result;
 8004422:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004426:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	fab2 f282 	clz	r2, r2
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	f042 0220 	orr.w	r2, r2, #32
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	f002 021f 	and.w	r2, r2, #31
 800443c:	2101      	movs	r1, #1
 800443e:	fa01 f202 	lsl.w	r2, r1, r2
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d082      	beq.n	800434e <HAL_RCC_OscConfig+0xdce>
 8004448:	e0cf      	b.n	80045ea <HAL_RCC_OscConfig+0x106a>
 800444a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800444e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004452:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800445c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	fa93 f2a3 	rbit	r2, r3
 8004466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800446a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800446e:	601a      	str	r2, [r3, #0]
  return result;
 8004470:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004474:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004478:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447a:	fab3 f383 	clz	r3, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004484:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	461a      	mov	r2, r3
 800448c:	2300      	movs	r3, #0
 800448e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004490:	f7fd feb8 	bl	8002204 <HAL_GetTick>
 8004494:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004498:	e009      	b.n	80044ae <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800449a:	f7fd feb3 	bl	8002204 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e09e      	b.n	80045ec <HAL_RCC_OscConfig+0x106c>
 80044ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044b2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80044b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	fa93 f2a3 	rbit	r2, r3
 80044ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ce:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80044d2:	601a      	str	r2, [r3, #0]
  return result;
 80044d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80044dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044de:	fab3 f383 	clz	r3, r3
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d104      	bne.n	80044fc <HAL_RCC_OscConfig+0xf7c>
 80044f2:	4b01      	ldr	r3, [pc, #4]	@ (80044f8 <HAL_RCC_OscConfig+0xf78>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	e029      	b.n	800454c <HAL_RCC_OscConfig+0xfcc>
 80044f8:	40021000 	.word	0x40021000
 80044fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004500:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004504:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800450e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	fa93 f2a3 	rbit	r2, r3
 8004518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800451c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004526:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800452a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004534:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	fa93 f2a3 	rbit	r2, r3
 800453e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004542:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	4b2b      	ldr	r3, [pc, #172]	@ (80045f8 <HAL_RCC_OscConfig+0x1078>)
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004550:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004554:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004558:	6011      	str	r1, [r2, #0]
 800455a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800455e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	fa92 f1a2 	rbit	r1, r2
 8004568:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800456c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004570:	6011      	str	r1, [r2, #0]
  return result;
 8004572:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004576:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	fab2 f282 	clz	r2, r2
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	f042 0220 	orr.w	r2, r2, #32
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	f002 021f 	and.w	r2, r2, #31
 800458c:	2101      	movs	r1, #1
 800458e:	fa01 f202 	lsl.w	r2, r1, r2
 8004592:	4013      	ands	r3, r2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d180      	bne.n	800449a <HAL_RCC_OscConfig+0xf1a>
 8004598:	e027      	b.n	80045ea <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800459a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800459e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e01e      	b.n	80045ec <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045ae:	4b12      	ldr	r3, [pc, #72]	@ (80045f8 <HAL_RCC_OscConfig+0x1078>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80045b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80045ba:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80045be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d10b      	bne.n	80045e6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80045ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80045d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80045d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d001      	beq.n	80045ea <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40021000 	.word	0x40021000

080045fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b09e      	sub	sp, #120	@ 0x78
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e162      	b.n	80048da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004614:	4b90      	ldr	r3, [pc, #576]	@ (8004858 <HAL_RCC_ClockConfig+0x25c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d910      	bls.n	8004644 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004622:	4b8d      	ldr	r3, [pc, #564]	@ (8004858 <HAL_RCC_ClockConfig+0x25c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f023 0207 	bic.w	r2, r3, #7
 800462a:	498b      	ldr	r1, [pc, #556]	@ (8004858 <HAL_RCC_ClockConfig+0x25c>)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	4313      	orrs	r3, r2
 8004630:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004632:	4b89      	ldr	r3, [pc, #548]	@ (8004858 <HAL_RCC_ClockConfig+0x25c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e14a      	b.n	80048da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004650:	4b82      	ldr	r3, [pc, #520]	@ (800485c <HAL_RCC_ClockConfig+0x260>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	497f      	ldr	r1, [pc, #508]	@ (800485c <HAL_RCC_ClockConfig+0x260>)
 800465e:	4313      	orrs	r3, r2
 8004660:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 80dc 	beq.w	8004828 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d13c      	bne.n	80046f2 <HAL_RCC_ClockConfig+0xf6>
 8004678:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800467c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004680:	fa93 f3a3 	rbit	r3, r3
 8004684:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004688:	fab3 f383 	clz	r3, r3
 800468c:	b2db      	uxtb	r3, r3
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	b2db      	uxtb	r3, r3
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	d102      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xa6>
 800469c:	4b6f      	ldr	r3, [pc, #444]	@ (800485c <HAL_RCC_ClockConfig+0x260>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	e00f      	b.n	80046c2 <HAL_RCC_ClockConfig+0xc6>
 80046a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80046a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046aa:	fa93 f3a3 	rbit	r3, r3
 80046ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80046b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80046b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80046b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046b8:	fa93 f3a3 	rbit	r3, r3
 80046bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046be:	4b67      	ldr	r3, [pc, #412]	@ (800485c <HAL_RCC_ClockConfig+0x260>)
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80046c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80046c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046ca:	fa92 f2a2 	rbit	r2, r2
 80046ce:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80046d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046d2:	fab2 f282 	clz	r2, r2
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	f042 0220 	orr.w	r2, r2, #32
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	f002 021f 	and.w	r2, r2, #31
 80046e2:	2101      	movs	r1, #1
 80046e4:	fa01 f202 	lsl.w	r2, r1, r2
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d17b      	bne.n	80047e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e0f3      	b.n	80048da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d13c      	bne.n	8004774 <HAL_RCC_ClockConfig+0x178>
 80046fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046fe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004702:	fa93 f3a3 	rbit	r3, r3
 8004706:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800470a:	fab3 f383 	clz	r3, r3
 800470e:	b2db      	uxtb	r3, r3
 8004710:	095b      	lsrs	r3, r3, #5
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b01      	cmp	r3, #1
 800471c:	d102      	bne.n	8004724 <HAL_RCC_ClockConfig+0x128>
 800471e:	4b4f      	ldr	r3, [pc, #316]	@ (800485c <HAL_RCC_ClockConfig+0x260>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	e00f      	b.n	8004744 <HAL_RCC_ClockConfig+0x148>
 8004724:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004728:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800472c:	fa93 f3a3 	rbit	r3, r3
 8004730:	647b      	str	r3, [r7, #68]	@ 0x44
 8004732:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004736:	643b      	str	r3, [r7, #64]	@ 0x40
 8004738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800473a:	fa93 f3a3 	rbit	r3, r3
 800473e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004740:	4b46      	ldr	r3, [pc, #280]	@ (800485c <HAL_RCC_ClockConfig+0x260>)
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004748:	63ba      	str	r2, [r7, #56]	@ 0x38
 800474a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800474c:	fa92 f2a2 	rbit	r2, r2
 8004750:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004752:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004754:	fab2 f282 	clz	r2, r2
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	f042 0220 	orr.w	r2, r2, #32
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	f002 021f 	and.w	r2, r2, #31
 8004764:	2101      	movs	r1, #1
 8004766:	fa01 f202 	lsl.w	r2, r1, r2
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d13a      	bne.n	80047e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0b2      	b.n	80048da <HAL_RCC_ClockConfig+0x2de>
 8004774:	2302      	movs	r3, #2
 8004776:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004782:	fab3 f383 	clz	r3, r3
 8004786:	b2db      	uxtb	r3, r3
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b01      	cmp	r3, #1
 8004794:	d102      	bne.n	800479c <HAL_RCC_ClockConfig+0x1a0>
 8004796:	4b31      	ldr	r3, [pc, #196]	@ (800485c <HAL_RCC_ClockConfig+0x260>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	e00d      	b.n	80047b8 <HAL_RCC_ClockConfig+0x1bc>
 800479c:	2302      	movs	r3, #2
 800479e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a2:	fa93 f3a3 	rbit	r3, r3
 80047a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a8:	2302      	movs	r3, #2
 80047aa:	623b      	str	r3, [r7, #32]
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	4b29      	ldr	r3, [pc, #164]	@ (800485c <HAL_RCC_ClockConfig+0x260>)
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	2202      	movs	r2, #2
 80047ba:	61ba      	str	r2, [r7, #24]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	fa92 f2a2 	rbit	r2, r2
 80047c2:	617a      	str	r2, [r7, #20]
  return result;
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	fab2 f282 	clz	r2, r2
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	f042 0220 	orr.w	r2, r2, #32
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	f002 021f 	and.w	r2, r2, #31
 80047d6:	2101      	movs	r1, #1
 80047d8:	fa01 f202 	lsl.w	r2, r1, r2
 80047dc:	4013      	ands	r3, r2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e079      	b.n	80048da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047e6:	4b1d      	ldr	r3, [pc, #116]	@ (800485c <HAL_RCC_ClockConfig+0x260>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f023 0203 	bic.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	491a      	ldr	r1, [pc, #104]	@ (800485c <HAL_RCC_ClockConfig+0x260>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047f8:	f7fd fd04 	bl	8002204 <HAL_GetTick>
 80047fc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004800:	f7fd fd00 	bl	8002204 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e061      	b.n	80048da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	4b11      	ldr	r3, [pc, #68]	@ (800485c <HAL_RCC_ClockConfig+0x260>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f003 020c 	and.w	r2, r3, #12
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	429a      	cmp	r2, r3
 8004826:	d1eb      	bne.n	8004800 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004828:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <HAL_RCC_ClockConfig+0x25c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d214      	bcs.n	8004860 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004836:	4b08      	ldr	r3, [pc, #32]	@ (8004858 <HAL_RCC_ClockConfig+0x25c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f023 0207 	bic.w	r2, r3, #7
 800483e:	4906      	ldr	r1, [pc, #24]	@ (8004858 <HAL_RCC_ClockConfig+0x25c>)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	4313      	orrs	r3, r2
 8004844:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004846:	4b04      	ldr	r3, [pc, #16]	@ (8004858 <HAL_RCC_ClockConfig+0x25c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d005      	beq.n	8004860 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e040      	b.n	80048da <HAL_RCC_ClockConfig+0x2de>
 8004858:	40022000 	.word	0x40022000
 800485c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d008      	beq.n	800487e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800486c:	4b1d      	ldr	r3, [pc, #116]	@ (80048e4 <HAL_RCC_ClockConfig+0x2e8>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	491a      	ldr	r1, [pc, #104]	@ (80048e4 <HAL_RCC_ClockConfig+0x2e8>)
 800487a:	4313      	orrs	r3, r2
 800487c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800488a:	4b16      	ldr	r3, [pc, #88]	@ (80048e4 <HAL_RCC_ClockConfig+0x2e8>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	4912      	ldr	r1, [pc, #72]	@ (80048e4 <HAL_RCC_ClockConfig+0x2e8>)
 800489a:	4313      	orrs	r3, r2
 800489c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800489e:	f000 f829 	bl	80048f4 <HAL_RCC_GetSysClockFreq>
 80048a2:	4601      	mov	r1, r0
 80048a4:	4b0f      	ldr	r3, [pc, #60]	@ (80048e4 <HAL_RCC_ClockConfig+0x2e8>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048ac:	22f0      	movs	r2, #240	@ 0xf0
 80048ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	fa92 f2a2 	rbit	r2, r2
 80048b6:	60fa      	str	r2, [r7, #12]
  return result;
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	fab2 f282 	clz	r2, r2
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	40d3      	lsrs	r3, r2
 80048c2:	4a09      	ldr	r2, [pc, #36]	@ (80048e8 <HAL_RCC_ClockConfig+0x2ec>)
 80048c4:	5cd3      	ldrb	r3, [r2, r3]
 80048c6:	fa21 f303 	lsr.w	r3, r1, r3
 80048ca:	4a08      	ldr	r2, [pc, #32]	@ (80048ec <HAL_RCC_ClockConfig+0x2f0>)
 80048cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80048ce:	4b08      	ldr	r3, [pc, #32]	@ (80048f0 <HAL_RCC_ClockConfig+0x2f4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fd fc52 	bl	800217c <HAL_InitTick>
  
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3778      	adds	r7, #120	@ 0x78
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40021000 	.word	0x40021000
 80048e8:	08005c7c 	.word	0x08005c7c
 80048ec:	20000000 	.word	0x20000000
 80048f0:	20000004 	.word	0x20000004

080048f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	2300      	movs	r3, #0
 8004908:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800490e:	4b1e      	ldr	r3, [pc, #120]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x94>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 030c 	and.w	r3, r3, #12
 800491a:	2b04      	cmp	r3, #4
 800491c:	d002      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0x30>
 800491e:	2b08      	cmp	r3, #8
 8004920:	d003      	beq.n	800492a <HAL_RCC_GetSysClockFreq+0x36>
 8004922:	e026      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004924:	4b19      	ldr	r3, [pc, #100]	@ (800498c <HAL_RCC_GetSysClockFreq+0x98>)
 8004926:	613b      	str	r3, [r7, #16]
      break;
 8004928:	e026      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	0c9b      	lsrs	r3, r3, #18
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	4a17      	ldr	r2, [pc, #92]	@ (8004990 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004934:	5cd3      	ldrb	r3, [r2, r3]
 8004936:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004938:	4b13      	ldr	r3, [pc, #76]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x94>)
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	4a14      	ldr	r2, [pc, #80]	@ (8004994 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004942:	5cd3      	ldrb	r3, [r2, r3]
 8004944:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004950:	4a0e      	ldr	r2, [pc, #56]	@ (800498c <HAL_RCC_GetSysClockFreq+0x98>)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	fbb2 f2f3 	udiv	r2, r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	fb02 f303 	mul.w	r3, r2, r3
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	e004      	b.n	800496c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a0c      	ldr	r2, [pc, #48]	@ (8004998 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004966:	fb02 f303 	mul.w	r3, r2, r3
 800496a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	613b      	str	r3, [r7, #16]
      break;
 8004970:	e002      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004972:	4b06      	ldr	r3, [pc, #24]	@ (800498c <HAL_RCC_GetSysClockFreq+0x98>)
 8004974:	613b      	str	r3, [r7, #16]
      break;
 8004976:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004978:	693b      	ldr	r3, [r7, #16]
}
 800497a:	4618      	mov	r0, r3
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40021000 	.word	0x40021000
 800498c:	007a1200 	.word	0x007a1200
 8004990:	08005c8c 	.word	0x08005c8c
 8004994:	08005c9c 	.word	0x08005c9c
 8004998:	003d0900 	.word	0x003d0900

0800499c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b092      	sub	sp, #72	@ 0x48
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80049ac:	2300      	movs	r3, #0
 80049ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 80d4 	beq.w	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c0:	4b4e      	ldr	r3, [pc, #312]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10e      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049cc:	4b4b      	ldr	r3, [pc, #300]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	4a4a      	ldr	r2, [pc, #296]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049d6:	61d3      	str	r3, [r2, #28]
 80049d8:	4b48      	ldr	r3, [pc, #288]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ea:	4b45      	ldr	r3, [pc, #276]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d118      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049f6:	4b42      	ldr	r3, [pc, #264]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a41      	ldr	r2, [pc, #260]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a02:	f7fd fbff 	bl	8002204 <HAL_GetTick>
 8004a06:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a08:	e008      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0a:	f7fd fbfb 	bl	8002204 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b64      	cmp	r3, #100	@ 0x64
 8004a16:	d901      	bls.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e169      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1c:	4b38      	ldr	r3, [pc, #224]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a28:	4b34      	ldr	r3, [pc, #208]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8084 	beq.w	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d07c      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a48:	4b2c      	ldr	r3, [pc, #176]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a56:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5a:	fa93 f3a3 	rbit	r3, r3
 8004a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a62:	fab3 f383 	clz	r3, r3
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4b26      	ldr	r3, [pc, #152]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	461a      	mov	r2, r3
 8004a72:	2301      	movs	r3, #1
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a86:	fab3 f383 	clz	r3, r3
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	461a      	mov	r2, r3
 8004a96:	2300      	movs	r3, #0
 8004a98:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a9a:	4a18      	ldr	r2, [pc, #96]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a9e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d04b      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aaa:	f7fd fbab 	bl	8002204 <HAL_GetTick>
 8004aae:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab2:	f7fd fba7 	bl	8002204 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e113      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ace:	fa93 f3a3 	rbit	r3, r3
 8004ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	623b      	str	r3, [r7, #32]
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	fa93 f3a3 	rbit	r3, r3
 8004ade:	61fb      	str	r3, [r7, #28]
  return result;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae2:	fab3 f383 	clz	r3, r3
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	f043 0302 	orr.w	r3, r3, #2
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d108      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004af6:	4b01      	ldr	r3, [pc, #4]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	e00d      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004afc:	40021000 	.word	0x40021000
 8004b00:	40007000 	.word	0x40007000
 8004b04:	10908100 	.word	0x10908100
 8004b08:	2302      	movs	r3, #2
 8004b0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	fa93 f3a3 	rbit	r3, r3
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	4b78      	ldr	r3, [pc, #480]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b18:	2202      	movs	r2, #2
 8004b1a:	613a      	str	r2, [r7, #16]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	fa92 f2a2 	rbit	r2, r2
 8004b22:	60fa      	str	r2, [r7, #12]
  return result;
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	fab2 f282 	clz	r2, r2
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	f002 021f 	and.w	r2, r2, #31
 8004b36:	2101      	movs	r1, #1
 8004b38:	fa01 f202 	lsl.w	r2, r1, r2
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0b7      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004b42:	4b6d      	ldr	r3, [pc, #436]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	496a      	ldr	r1, [pc, #424]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d105      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b5c:	4b66      	ldr	r3, [pc, #408]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	4a65      	ldr	r2, [pc, #404]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b74:	4b60      	ldr	r3, [pc, #384]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b78:	f023 0203 	bic.w	r2, r3, #3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	495d      	ldr	r1, [pc, #372]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b92:	4b59      	ldr	r3, [pc, #356]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b96:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	4956      	ldr	r1, [pc, #344]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bb0:	4b51      	ldr	r3, [pc, #324]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	494e      	ldr	r1, [pc, #312]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bce:	4b4a      	ldr	r3, [pc, #296]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd2:	f023 0210 	bic.w	r2, r3, #16
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	4947      	ldr	r1, [pc, #284]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004bec:	4b42      	ldr	r3, [pc, #264]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf8:	493f      	ldr	r1, [pc, #252]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d008      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0e:	f023 0220 	bic.w	r2, r3, #32
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	4938      	ldr	r1, [pc, #224]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c28:	4b33      	ldr	r3, [pc, #204]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	4930      	ldr	r1, [pc, #192]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d008      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c46:	4b2c      	ldr	r3, [pc, #176]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	4929      	ldr	r1, [pc, #164]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c64:	4b24      	ldr	r3, [pc, #144]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c70:	4921      	ldr	r1, [pc, #132]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d008      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c82:	4b1d      	ldr	r3, [pc, #116]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c86:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	491a      	ldr	r1, [pc, #104]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004ca0:	4b15      	ldr	r3, [pc, #84]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca4:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	4912      	ldr	r1, [pc, #72]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cca:	490b      	ldr	r1, [pc, #44]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004cdc:	4b06      	ldr	r3, [pc, #24]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce8:	4903      	ldr	r1, [pc, #12]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3748      	adds	r7, #72	@ 0x48
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40021000 	.word	0x40021000

08004cfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e09d      	b.n	8004e4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d108      	bne.n	8004d28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d1e:	d009      	beq.n	8004d34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	61da      	str	r2, [r3, #28]
 8004d26:	e005      	b.n	8004d34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fd f8b8 	bl	8001ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d74:	d902      	bls.n	8004d7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e002      	b.n	8004d82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004d8a:	d007      	beq.n	8004d9c <HAL_SPI_Init+0xa0>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d94:	d002      	beq.n	8004d9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dde:	ea42 0103 	orr.w	r1, r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	0c1b      	lsrs	r3, r3, #16
 8004df8:	f003 0204 	and.w	r2, r3, #4
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004e18:	ea42 0103 	orr.w	r1, r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e049      	b.n	8004ef8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d106      	bne.n	8004e7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7fd f865 	bl	8001f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2202      	movs	r2, #2
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f000 fb8f 	bl	80055b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d001      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e04a      	b.n	8004fae <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a21      	ldr	r2, [pc, #132]	@ (8004fbc <HAL_TIM_Base_Start_IT+0xbc>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d018      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x6c>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f42:	d013      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x6c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00e      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x6c>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d009      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x6c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a1a      	ldr	r2, [pc, #104]	@ (8004fc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x6c>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a19      	ldr	r2, [pc, #100]	@ (8004fcc <HAL_TIM_Base_Start_IT+0xcc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d115      	bne.n	8004f98 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	4b17      	ldr	r3, [pc, #92]	@ (8004fd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b06      	cmp	r3, #6
 8004f7c:	d015      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0xaa>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f84:	d011      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0201 	orr.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f96:	e008      	b.n	8004faa <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	e000      	b.n	8004fac <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004faa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	40000800 	.word	0x40000800
 8004fc8:	40013400 	.word	0x40013400
 8004fcc:	40014000 	.word	0x40014000
 8004fd0:	00010007 	.word	0x00010007

08004fd4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e049      	b.n	800507a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f841 	bl	8005082 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3304      	adds	r3, #4
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f000 face 	bl	80055b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d020      	beq.n	80050fa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d01b      	beq.n	80050fa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f06f 0202 	mvn.w	r2, #2
 80050ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fa49 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
 80050e6:	e005      	b.n	80050f4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fa3b 	bl	8005564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fa4c 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d020      	beq.n	8005146 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	d01b      	beq.n	8005146 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f06f 0204 	mvn.w	r2, #4
 8005116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fa23 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
 8005132:	e005      	b.n	8005140 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fa15 	bl	8005564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fa26 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d020      	beq.n	8005192 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01b      	beq.n	8005192 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f06f 0208 	mvn.w	r2, #8
 8005162:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2204      	movs	r2, #4
 8005168:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	f003 0303 	and.w	r3, r3, #3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f9fd 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
 800517e:	e005      	b.n	800518c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f9ef 	bl	8005564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa00 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b00      	cmp	r3, #0
 800519a:	d020      	beq.n	80051de <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01b      	beq.n	80051de <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f06f 0210 	mvn.w	r2, #16
 80051ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2208      	movs	r2, #8
 80051b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f9d7 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
 80051ca:	e005      	b.n	80051d8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f9c9 	bl	8005564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f9da 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00c      	beq.n	8005202 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d007      	beq.n	8005202 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f06f 0201 	mvn.w	r2, #1
 80051fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7fc fbb9 	bl	8001974 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00c      	beq.n	8005226 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005212:	2b00      	cmp	r3, #0
 8005214:	d007      	beq.n	8005226 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800521e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fca5 	bl	8005b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00c      	beq.n	800524a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005236:	2b00      	cmp	r3, #0
 8005238:	d007      	beq.n	800524a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fc9d 	bl	8005b84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00c      	beq.n	800526e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f999 	bl	80055a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00c      	beq.n	8005292 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	d007      	beq.n	8005292 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f06f 0220 	mvn.w	r2, #32
 800528a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fc65 	bl	8005b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b086      	sub	sp, #24
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e088      	b.n	80053ca <HAL_TIM_IC_ConfigChannel+0x130>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d11b      	bne.n	80052fe <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80052d6:	f000 fa09 	bl	80056ec <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	699a      	ldr	r2, [r3, #24]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 020c 	bic.w	r2, r2, #12
 80052e8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6999      	ldr	r1, [r3, #24]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	619a      	str	r2, [r3, #24]
 80052fc:	e060      	b.n	80053c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b04      	cmp	r3, #4
 8005302:	d11c      	bne.n	800533e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005314:	f000 fa81 	bl	800581a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005326:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6999      	ldr	r1, [r3, #24]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	021a      	lsls	r2, r3, #8
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	619a      	str	r2, [r3, #24]
 800533c:	e040      	b.n	80053c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b08      	cmp	r3, #8
 8005342:	d11b      	bne.n	800537c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005354:	f000 face 	bl	80058f4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	69da      	ldr	r2, [r3, #28]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 020c 	bic.w	r2, r2, #12
 8005366:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69d9      	ldr	r1, [r3, #28]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	61da      	str	r2, [r3, #28]
 800537a:	e021      	b.n	80053c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b0c      	cmp	r3, #12
 8005380:	d11c      	bne.n	80053bc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005392:	f000 faeb 	bl	800596c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	69da      	ldr	r2, [r3, #28]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80053a4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69d9      	ldr	r1, [r3, #28]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	021a      	lsls	r2, r3, #8
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	61da      	str	r2, [r3, #28]
 80053ba:	e001      	b.n	80053c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_TIM_ConfigClockSource+0x1c>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e0b6      	b.n	800555c <HAL_TIM_ConfigClockSource+0x18a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2202      	movs	r2, #2
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800540c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005410:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005418:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800542a:	d03e      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0xd8>
 800542c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005430:	f200 8087 	bhi.w	8005542 <HAL_TIM_ConfigClockSource+0x170>
 8005434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005438:	f000 8086 	beq.w	8005548 <HAL_TIM_ConfigClockSource+0x176>
 800543c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005440:	d87f      	bhi.n	8005542 <HAL_TIM_ConfigClockSource+0x170>
 8005442:	2b70      	cmp	r3, #112	@ 0x70
 8005444:	d01a      	beq.n	800547c <HAL_TIM_ConfigClockSource+0xaa>
 8005446:	2b70      	cmp	r3, #112	@ 0x70
 8005448:	d87b      	bhi.n	8005542 <HAL_TIM_ConfigClockSource+0x170>
 800544a:	2b60      	cmp	r3, #96	@ 0x60
 800544c:	d050      	beq.n	80054f0 <HAL_TIM_ConfigClockSource+0x11e>
 800544e:	2b60      	cmp	r3, #96	@ 0x60
 8005450:	d877      	bhi.n	8005542 <HAL_TIM_ConfigClockSource+0x170>
 8005452:	2b50      	cmp	r3, #80	@ 0x50
 8005454:	d03c      	beq.n	80054d0 <HAL_TIM_ConfigClockSource+0xfe>
 8005456:	2b50      	cmp	r3, #80	@ 0x50
 8005458:	d873      	bhi.n	8005542 <HAL_TIM_ConfigClockSource+0x170>
 800545a:	2b40      	cmp	r3, #64	@ 0x40
 800545c:	d058      	beq.n	8005510 <HAL_TIM_ConfigClockSource+0x13e>
 800545e:	2b40      	cmp	r3, #64	@ 0x40
 8005460:	d86f      	bhi.n	8005542 <HAL_TIM_ConfigClockSource+0x170>
 8005462:	2b30      	cmp	r3, #48	@ 0x30
 8005464:	d064      	beq.n	8005530 <HAL_TIM_ConfigClockSource+0x15e>
 8005466:	2b30      	cmp	r3, #48	@ 0x30
 8005468:	d86b      	bhi.n	8005542 <HAL_TIM_ConfigClockSource+0x170>
 800546a:	2b20      	cmp	r3, #32
 800546c:	d060      	beq.n	8005530 <HAL_TIM_ConfigClockSource+0x15e>
 800546e:	2b20      	cmp	r3, #32
 8005470:	d867      	bhi.n	8005542 <HAL_TIM_ConfigClockSource+0x170>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d05c      	beq.n	8005530 <HAL_TIM_ConfigClockSource+0x15e>
 8005476:	2b10      	cmp	r3, #16
 8005478:	d05a      	beq.n	8005530 <HAL_TIM_ConfigClockSource+0x15e>
 800547a:	e062      	b.n	8005542 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800548c:	f000 fac6 	bl	8005a1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800549e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	609a      	str	r2, [r3, #8]
      break;
 80054a8:	e04f      	b.n	800554a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054ba:	f000 faaf 	bl	8005a1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054cc:	609a      	str	r2, [r3, #8]
      break;
 80054ce:	e03c      	b.n	800554a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054dc:	461a      	mov	r2, r3
 80054de:	f000 f96d 	bl	80057bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2150      	movs	r1, #80	@ 0x50
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fa7c 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 80054ee:	e02c      	b.n	800554a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054fc:	461a      	mov	r2, r3
 80054fe:	f000 f9c9 	bl	8005894 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2160      	movs	r1, #96	@ 0x60
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fa6c 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 800550e:	e01c      	b.n	800554a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800551c:	461a      	mov	r2, r3
 800551e:	f000 f94d 	bl	80057bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2140      	movs	r1, #64	@ 0x40
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fa5c 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 800552e:	e00c      	b.n	800554a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4619      	mov	r1, r3
 800553a:	4610      	mov	r0, r2
 800553c:	f000 fa53 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 8005540:	e003      	b.n	800554a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	73fb      	strb	r3, [r7, #15]
      break;
 8005546:	e000      	b.n	800554a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005548:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800555a:	7bfb      	ldrb	r3, [r7, #15]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a42      	ldr	r2, [pc, #264]	@ (80056d0 <TIM_Base_SetConfig+0x11c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00f      	beq.n	80055ec <TIM_Base_SetConfig+0x38>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055d2:	d00b      	beq.n	80055ec <TIM_Base_SetConfig+0x38>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a3f      	ldr	r2, [pc, #252]	@ (80056d4 <TIM_Base_SetConfig+0x120>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d007      	beq.n	80055ec <TIM_Base_SetConfig+0x38>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a3e      	ldr	r2, [pc, #248]	@ (80056d8 <TIM_Base_SetConfig+0x124>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d003      	beq.n	80055ec <TIM_Base_SetConfig+0x38>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a3d      	ldr	r2, [pc, #244]	@ (80056dc <TIM_Base_SetConfig+0x128>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d108      	bne.n	80055fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a33      	ldr	r2, [pc, #204]	@ (80056d0 <TIM_Base_SetConfig+0x11c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d01b      	beq.n	800563e <TIM_Base_SetConfig+0x8a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800560c:	d017      	beq.n	800563e <TIM_Base_SetConfig+0x8a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a30      	ldr	r2, [pc, #192]	@ (80056d4 <TIM_Base_SetConfig+0x120>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d013      	beq.n	800563e <TIM_Base_SetConfig+0x8a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a2f      	ldr	r2, [pc, #188]	@ (80056d8 <TIM_Base_SetConfig+0x124>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00f      	beq.n	800563e <TIM_Base_SetConfig+0x8a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a2e      	ldr	r2, [pc, #184]	@ (80056dc <TIM_Base_SetConfig+0x128>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00b      	beq.n	800563e <TIM_Base_SetConfig+0x8a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a2d      	ldr	r2, [pc, #180]	@ (80056e0 <TIM_Base_SetConfig+0x12c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d007      	beq.n	800563e <TIM_Base_SetConfig+0x8a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a2c      	ldr	r2, [pc, #176]	@ (80056e4 <TIM_Base_SetConfig+0x130>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d003      	beq.n	800563e <TIM_Base_SetConfig+0x8a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a2b      	ldr	r2, [pc, #172]	@ (80056e8 <TIM_Base_SetConfig+0x134>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d108      	bne.n	8005650 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4313      	orrs	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a16      	ldr	r2, [pc, #88]	@ (80056d0 <TIM_Base_SetConfig+0x11c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00f      	beq.n	800569c <TIM_Base_SetConfig+0xe8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a17      	ldr	r2, [pc, #92]	@ (80056dc <TIM_Base_SetConfig+0x128>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00b      	beq.n	800569c <TIM_Base_SetConfig+0xe8>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a16      	ldr	r2, [pc, #88]	@ (80056e0 <TIM_Base_SetConfig+0x12c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d007      	beq.n	800569c <TIM_Base_SetConfig+0xe8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a15      	ldr	r2, [pc, #84]	@ (80056e4 <TIM_Base_SetConfig+0x130>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_Base_SetConfig+0xe8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a14      	ldr	r2, [pc, #80]	@ (80056e8 <TIM_Base_SetConfig+0x134>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d103      	bne.n	80056a4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d105      	bne.n	80056c2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f023 0201 	bic.w	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	611a      	str	r2, [r3, #16]
  }
}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40012c00 	.word	0x40012c00
 80056d4:	40000400 	.word	0x40000400
 80056d8:	40000800 	.word	0x40000800
 80056dc:	40013400 	.word	0x40013400
 80056e0:	40014000 	.word	0x40014000
 80056e4:	40014400 	.word	0x40014400
 80056e8:	40014800 	.word	0x40014800

080056ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
 80056f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	f023 0201 	bic.w	r2, r3, #1
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4a24      	ldr	r2, [pc, #144]	@ (80057a8 <TIM_TI1_SetConfig+0xbc>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <TIM_TI1_SetConfig+0x56>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005720:	d00f      	beq.n	8005742 <TIM_TI1_SetConfig+0x56>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4a21      	ldr	r2, [pc, #132]	@ (80057ac <TIM_TI1_SetConfig+0xc0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00b      	beq.n	8005742 <TIM_TI1_SetConfig+0x56>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4a20      	ldr	r2, [pc, #128]	@ (80057b0 <TIM_TI1_SetConfig+0xc4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d007      	beq.n	8005742 <TIM_TI1_SetConfig+0x56>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4a1f      	ldr	r2, [pc, #124]	@ (80057b4 <TIM_TI1_SetConfig+0xc8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d003      	beq.n	8005742 <TIM_TI1_SetConfig+0x56>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4a1e      	ldr	r2, [pc, #120]	@ (80057b8 <TIM_TI1_SetConfig+0xcc>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d101      	bne.n	8005746 <TIM_TI1_SetConfig+0x5a>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <TIM_TI1_SetConfig+0x5c>
 8005746:	2300      	movs	r3, #0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f023 0303 	bic.w	r3, r3, #3
 8005752:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	e003      	b.n	8005766 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800576c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	b2db      	uxtb	r3, r3
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f023 030a 	bic.w	r3, r3, #10
 8005780:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f003 030a 	and.w	r3, r3, #10
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40000400 	.word	0x40000400
 80057b0:	40000800 	.word	0x40000800
 80057b4:	40013400 	.word	0x40013400
 80057b8:	40014000 	.word	0x40014000

080057bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f023 0201 	bic.w	r2, r3, #1
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f023 030a 	bic.w	r3, r3, #10
 80057f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	621a      	str	r2, [r3, #32]
}
 800580e:	bf00      	nop
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800581a:	b480      	push	{r7}
 800581c:	b087      	sub	sp, #28
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
 8005826:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f023 0210 	bic.w	r2, r3, #16
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	021b      	lsls	r3, r3, #8
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	031b      	lsls	r3, r3, #12
 800585e:	b29b      	uxth	r3, r3
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800586c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	621a      	str	r2, [r3, #32]
}
 8005888:	bf00      	nop
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f023 0210 	bic.w	r2, r3, #16
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	031b      	lsls	r3, r3, #12
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	621a      	str	r2, [r3, #32]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f023 0303 	bic.w	r3, r3, #3
 8005920:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005930:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	b2db      	uxtb	r3, r3
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005944:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	021b      	lsls	r3, r3, #8
 800594a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	621a      	str	r2, [r3, #32]
}
 8005960:	bf00      	nop
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005998:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	031b      	lsls	r3, r3, #12
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80059be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	031b      	lsls	r3, r3, #12
 80059c4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	bf00      	nop
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b085      	sub	sp, #20
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f043 0307 	orr.w	r3, r3, #7
 8005a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	609a      	str	r2, [r3, #8]
}
 8005a10:	bf00      	nop
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
 8005a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	021a      	lsls	r2, r3, #8
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	609a      	str	r2, [r3, #8]
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e063      	b.n	8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a2b      	ldr	r2, [pc, #172]	@ (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d004      	beq.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d108      	bne.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005aae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d018      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae6:	d013      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a18      	ldr	r2, [pc, #96]	@ (8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00e      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a17      	ldr	r2, [pc, #92]	@ (8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d009      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a12      	ldr	r2, [pc, #72]	@ (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d004      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a13      	ldr	r2, [pc, #76]	@ (8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d10c      	bne.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	40012c00 	.word	0x40012c00
 8005b4c:	40013400 	.word	0x40013400
 8005b50:	40000400 	.word	0x40000400
 8005b54:	40000800 	.word	0x40000800
 8005b58:	40014000 	.word	0x40014000

08005b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ba0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005ba4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	1d3b      	adds	r3, r7, #4
 8005bd8:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <memset>:
 8005c0a:	4402      	add	r2, r0
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d100      	bne.n	8005c14 <memset+0xa>
 8005c12:	4770      	bx	lr
 8005c14:	f803 1b01 	strb.w	r1, [r3], #1
 8005c18:	e7f9      	b.n	8005c0e <memset+0x4>
	...

08005c1c <__libc_init_array>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c54 <__libc_init_array+0x38>)
 8005c20:	4c0d      	ldr	r4, [pc, #52]	@ (8005c58 <__libc_init_array+0x3c>)
 8005c22:	1b64      	subs	r4, r4, r5
 8005c24:	10a4      	asrs	r4, r4, #2
 8005c26:	2600      	movs	r6, #0
 8005c28:	42a6      	cmp	r6, r4
 8005c2a:	d109      	bne.n	8005c40 <__libc_init_array+0x24>
 8005c2c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c5c <__libc_init_array+0x40>)
 8005c2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c60 <__libc_init_array+0x44>)
 8005c30:	f000 f818 	bl	8005c64 <_init>
 8005c34:	1b64      	subs	r4, r4, r5
 8005c36:	10a4      	asrs	r4, r4, #2
 8005c38:	2600      	movs	r6, #0
 8005c3a:	42a6      	cmp	r6, r4
 8005c3c:	d105      	bne.n	8005c4a <__libc_init_array+0x2e>
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c44:	4798      	blx	r3
 8005c46:	3601      	adds	r6, #1
 8005c48:	e7ee      	b.n	8005c28 <__libc_init_array+0xc>
 8005c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c4e:	4798      	blx	r3
 8005c50:	3601      	adds	r6, #1
 8005c52:	e7f2      	b.n	8005c3a <__libc_init_array+0x1e>
 8005c54:	08005cb4 	.word	0x08005cb4
 8005c58:	08005cb4 	.word	0x08005cb4
 8005c5c:	08005cb4 	.word	0x08005cb4
 8005c60:	08005cb8 	.word	0x08005cb8

08005c64 <_init>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	bf00      	nop
 8005c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6a:	bc08      	pop	{r3}
 8005c6c:	469e      	mov	lr, r3
 8005c6e:	4770      	bx	lr

08005c70 <_fini>:
 8005c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c72:	bf00      	nop
 8005c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c76:	bc08      	pop	{r3}
 8005c78:	469e      	mov	lr, r3
 8005c7a:	4770      	bx	lr
